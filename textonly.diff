diff --git a/.github/add_kaggle_metadata_enrichment.py b/.github/add_kaggle_metadata_enrichment.py
deleted file mode 100644
index d58324bd1412f21416a383116a4a2cac673c2c1c..0000000000000000000000000000000000000000
--- a/.github/add_kaggle_metadata_enrichment.py
+++ /dev/null
@@ -1,25 +0,0 @@
-import json, os, datetime
-
-TAGS = ["climate", "agriculture", "green-ai", "cpu-efficient", "spatial-data", "time-series"]
-
-def enrich_metadata(folder, region_name):
-    path = os.path.join(folder, "dataset-metadata.json")
-    with open(path) as f:
-        meta = json.load(f)
-
-    meta["subtitle"] = f"{region_name} regional climate cache ({datetime.date.today().year})"
-    meta["keywords"] = TAGS
-    meta["resources"] = [
-        {"path": "chirps_cached.csv", "description": "Daily rainfall (mm)"},
-        {"path": "openmeteo_cached.csv", "description": "Temperature & RH"},
-        {"path": "era5_recent.csv", "description": "Short-term ERA5 reanalysis"},
-    ]
-    meta["usabilityRating"] = 1.0
-    meta["collaborators"] = ["morganurich"]
-
-    with open(path, "w") as f:
-        json.dump(meta, f, indent=2)
-
-for region in ["hungary_farmland", "jamaica_coffee"]:
-    enrich_metadata(os.path.join("data", region), region)
-    print(f"‚úÖ Enriched metadata for {region}")diff --git a/README.md b/README.md
index da0fc81f6b135d87f7a6b8224d328b0a34607556..d89d06aee7b6591c621577fc86049463d5c68340 100644
--- a/README.md
+++ b/README.md
@@ -123,29 +123,40 @@ python scripts/run_pipeline.py --region hungary_farmland --refresh
 # Day-to-day analysis (offline)
 python scripts/run_pipeline.py --region hungary_farmland --analyze --allow-stale
 ```
 
 ### Pipeline modes & data layout
 
 - `--bootstrap` performs the first end-to-end fetch for a region, materialising every required layer into `data/<region>/caches/<timestamp>` and promoting it to `data/<region>/current/`.
 - `--refresh` only re-fetches layers whose TTL has expired, creating a new dated snapshot before updating `current/` atomically.
 - `--analyze` never touches the network. It validates cache freshness (respecting `--allow-stale` and `--max-staleness`) and rebuilds insights from the data stored under `data/<region>/current/`.
 - Each snapshot writes a provenance manifest (`manifest.json`) capturing fetch metadata, hashes, TTL policies, and expiry timestamps.
 
 ### CI guardrails
 
 - `.github/workflows/test-run.yml` runs `--analyze --allow-stale` on every push to guarantee the repository stays runnable offline.
 - `.github/workflows/monthly-refresh.yml` opens a scheduled online window on the first of each month to refresh caches, upload manifests, and push the updated `data/<region>/current/` view.
 ### üöÄ Run the end-to-end pipeline
 
 You can run the full regional workflow (initialization ‚Üí fetch ‚Üí cache ‚Üí insights ‚Üí model training) with a single command:
 
 ```bash
 python scripts/run_pipeline.py --region hungary_farmland
 ```
 
 Add flags such as `--skip-fetch`, `--skip-train`, or `--report reports/hungary_pipeline.json` to customize what runs and to capture a machine-readable summary of each stage.
 
+### Region metadata utilities
+
+Reusable helpers for storing and enriching region metadata live in `engine/utils/metadata.py`. The module exposes `load_region_metadata` for loading profiles during the insight pipeline as well as `update_metadata`, which writes incremental metadata snapshots to each region cache (useful for future mesh association research or curating new training corpora).
+
 > ‚ÑπÔ∏è The pipeline automatically calls `scripts/init_region.py` for you. Keep `init_region` handy for manual setup or tweaking metadata, but use `run_pipeline` when you want the full orchestration in one go.
 
 Recommended Python: 3.12.x
-Compatible with: Kaggle notebooks and GitHub Actions CPU runners
+Validated on local development machines and GitHub Actions CPU runners
+
+### Model checkpoints
+
+Pre-trained Random Forest binaries are **not** tracked in the repository to keep the tree
+source-only. When `engine.model_predict.predict_outcomes` runs, it will load a cached
+checkpoint if one exists under `models/<region>_rf.pkl`; otherwise it trains a fresh,
+lightweight model on the distilled features and persists it locally for future runs.diff --git a/agent/__init__.py b/agent/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..d09e81c413d941d031ee88d297617213cb25a4dd
--- /dev/null
+++ b/agent/__init__.py
@@ -0,0 +1,6 @@
+"""Agent-facing helpers for insight and recommendation generation."""
+
+from __future__ import annotations
+
+__all__ = []
+diff --git a/agent/feature_extract.py b/agent/feature_extract.py
deleted file mode 100644
index 7780e2e9d53f0329dbcc3c27da2321df0735a995..0000000000000000000000000000000000000000
--- a/agent/feature_extract.py
+++ /dev/null
@@ -1,3 +0,0 @@
-def compute_spi(series, window=30):
-    # TODO: implement SPI using xclim or climate_indices
-    return seriesdiff --git a/agent/insight_engine.py b/agent/insight_engine.py
new file mode 100644
index 0000000000000000000000000000000000000000..dc709620188b4dc98791ebe6ff601406b170f279
--- /dev/null
+++ b/agent/insight_engine.py
@@ -0,0 +1,281 @@
+"""Orchestrates distillation, rule tagging, and insight text generation."""
+
+from __future__ import annotations
+
+import importlib
+import json
+import os
+from pathlib import Path
+from typing import Iterable, Mapping, Sequence
+
+import pandas as pd
+
+from engine.distill_insights import distill_region
+from engine.utils.metadata import load_phenology_hints, load_region_metadata
+from agent.rules.engine import CRITICAL_RULES, evaluate_rules_row, parse_rule_hit
+
+OUTPUT_DIR = Path("outputs")
+TEMPLATE_PATH = Path("data/context/insight_templates.json")
+
+
+def build_insights(region: str) -> tuple[str, str | None]:
+    summary_path = Path(distill_region(region))
+    df = pd.read_csv(summary_path)
+
+    metadata = load_region_metadata(region)
+    phenology = load_phenology_hints(region, metadata)
+    templates = _load_templates()
+
+    crops = metadata.get("dominant_crops") or ["mixed cropping"]
+    crop_type = str(crops[0])
+    rule_overrides = metadata.get("rule_overrides")
+    critical_rules = set(CRITICAL_RULES)
+    if isinstance(rule_overrides, Sequence):
+        critical_rules.update(
+            rule.get("id")
+            for rule in rule_overrides
+            if isinstance(rule, Mapping) and rule.get("critical")
+        )
+
+    records = []
+    alerts: list[str] = []
+
+    for _, row in df.iterrows():
+        row_dict = row.to_dict()
+        hits = evaluate_rules_row(row_dict, rule_overrides)
+        rule_ids: list[str] = []
+        rule_messages: list[str] = []
+        for hit in hits:
+            rid, message = parse_rule_hit(hit)
+            rule_ids.append(rid)
+            rule_messages.append(message)
+            if rid in critical_rules:
+                alerts.append(_format_alert(region, rid, message, row_dict))
+
+        recommendation = _maybe_fetch_practices(
+            crop_type,
+            rule_ids,
+            row_dict,
+            metadata,
+            phenology,
+        )
+        insight_text = _render_insight(
+            row_dict,
+            metadata,
+            crop_type,
+            rule_messages,
+            recommendation,
+            templates,
+            phenology,
+        )
+
+        records.append(
+            {
+                "month": str(row_dict.get("month")),
+                "crop_type": crop_type,
+                "region_name": metadata.get("region_name"),
+                "spi": row_dict.get("spi"),
+                "ndvi_anomaly": row_dict.get("ndvi_anomaly"),
+                "soil_surface_moisture": row_dict.get("soil_surface_moisture"),
+                "temp_mean": row_dict.get("temp_mean"),
+                "rule_hits": ",".join(rule_ids),
+                "model_signal": row_dict.get("model_signal"),
+                "insight_text": insight_text,
+            }
+        )
+
+    feed_df = pd.DataFrame.from_records(records)
+    output_dir = OUTPUT_DIR / region
+    output_dir.mkdir(parents=True, exist_ok=True)
+    feed_path = output_dir / "insight_feed.csv"
+    feed_df.to_csv(feed_path, index=False)
+
+    alerts_path: Path | None = None
+    if alerts:
+        alerts_path = output_dir / "alerts.txt"
+        unique_alerts = _unique_preserve_order(alerts)
+        alerts_path.write_text("\n".join(unique_alerts) + "\n")
+
+    return str(feed_path), str(alerts_path) if alerts_path else None
+
+
+def _render_insight(
+    row: Mapping[str, float],
+    metadata: Mapping[str, object],
+    crop_type: str,
+    rule_messages: Sequence[str],
+    practice_recommendations: Sequence[str],
+    templates: Mapping[str, str],
+    phenology: Mapping[str, object],
+) -> str:
+    template = templates.get("base") or (
+        "{region_name} ({crop_type}) ‚Äî {month}: SPI {spi}, NDVI anomaly {ndvi}, "
+        "soil moisture {soil}, temp {temp}. {rule_summary} {model_desc}{practice}"
+    )
+
+    spi = _format_metric(row.get("spi"))
+    ndvi = _format_metric(row.get("ndvi_anomaly"))
+    soil = _format_metric(row.get("soil_surface_moisture"))
+    temp = _format_metric(row.get("temp_mean"))
+    rule_summary = _format_rule_summary(rule_messages)
+    model_desc = _describe_model_signal(row.get("model_signal"))
+    practice = "" if not practice_recommendations else " " + " ".join(practice_recommendations)
+    month = str(row.get("month"))
+    stage = _phenology_stage(month, phenology)
+
+    return template.format(
+        region_name=metadata.get("region_name", "Unknown region"),
+        crop_type=crop_type,
+        month=month,
+        spi=spi,
+        ndvi=ndvi,
+        soil=soil,
+        temp=temp,
+        rule_summary=rule_summary,
+        model_desc=model_desc,
+        practice=practice,
+        phenology_stage=stage,
+    ).strip()
+
+
+def _format_metric(value: float | None) -> str:
+    if value is None or (isinstance(value, float) and pd.isna(value)):
+        return "n/a"
+    return f"{value:.2f}"
+
+
+def _format_rule_summary(messages: Sequence[str]) -> str:
+    if not messages:
+        return "No major rule triggers this month."
+    return "Triggers: " + "; ".join(messages)
+
+
+def _describe_model_signal(value: float | None) -> str:
+    if value is None or (isinstance(value, float) and pd.isna(value)):
+        return "Model signal unavailable."
+    if value >= 0.75:
+        level = "high risk"
+    elif value >= 0.5:
+        level = "moderate risk"
+    else:
+        level = "low risk"
+    return f"Model signal {level} ({value:.2f})."
+
+
+def _phenology_stage(month: str, phenology: Mapping[str, object]) -> str:
+    stage_map = phenology.get("stage_by_month") if isinstance(phenology, Mapping) else None
+    if isinstance(stage_map, Mapping):
+        key = str(month)[-2:]
+        stage = stage_map.get(key)
+        if stage:
+            return str(stage)
+    return str(phenology.get("current_stage", "")) if phenology else ""
+
+
+def _unique_preserve_order(items: Iterable[str]) -> list[str]:
+    seen: set[str] = set()
+    ordered: list[str] = []
+    for item in items:
+        if item not in seen:
+            seen.add(item)
+            ordered.append(item)
+    return ordered
+
+
+def _format_alert(region: str, rule_id: str, message: str, row: Mapping[str, float]) -> str:
+    prefix = f"[{region}] {rule_id}:"
+    summary_parts = [prefix, message]
+    spi = row.get("spi")
+    if spi is not None and not pd.isna(spi):
+        summary_parts.append(f"SPI={spi:.2f}")
+    ndvi = row.get("ndvi_anomaly")
+    if ndvi is not None and not pd.isna(ndvi):
+        summary_parts.append(f"NDVI={ndvi:.2f}")
+    return " ".join(summary_parts)
+
+
+class PracticeLibraryAdapter:
+    _callable = None
+    _loaded = False
+    _warned = False
+
+    @classmethod
+    def fetch(
+        cls,
+        crop: str,
+        rule_ids: Sequence[str],
+        row: Mapping[str, float],
+        metadata: Mapping[str, object],
+        phenology: Mapping[str, object],
+    ) -> list[str]:
+        func = cls._resolve_callable()
+        if func is None:
+            return []
+        anomaly_type = rule_ids[0] if rule_ids else "baseline"
+        kwargs = {
+            "crop": crop,
+            "anomaly_type": anomaly_type,
+            "spi": row.get("spi"),
+            "ndvi_anomaly": row.get("ndvi_anomaly"),
+            "soil_type": metadata.get("soil_type"),
+            "stage": _phenology_stage(str(row.get("month")), phenology) or None,
+        }
+        try:
+            recs = func(**kwargs)
+        except Exception:
+            return []
+        if isinstance(recs, str):
+            return [recs]
+        return [str(rec) for rec in recs or []]
+
+    @classmethod
+    def _resolve_callable(cls):
+        if cls._loaded:
+            return cls._callable
+        cls._loaded = True
+        try:
+            module = importlib.import_module("practice_library")
+        except Exception:
+            url = os.getenv("PRACTICE_LIB_URL")
+            if url and not cls._warned:
+                cls._warned = True
+                print(
+                    "‚ö†Ô∏è PRACTICE_LIB_URL is set but the optional practice_library package "
+                    "is unavailable; falling back to templates."
+                )
+            cls._callable = None
+            return None
+        func = getattr(module, "get_recommendations", None)
+        if callable(func):
+            cls._callable = func
+        else:
+            cls._callable = None
+        return cls._callable
+
+
+def _maybe_fetch_practices(
+    crop: str,
+    rule_ids: Sequence[str],
+    row: Mapping[str, float],
+    metadata: Mapping[str, object],
+    phenology: Mapping[str, object],
+) -> list[str]:
+    return PracticeLibraryAdapter.fetch(crop, rule_ids, row, metadata, phenology)
+
+
+def _load_templates() -> Mapping[str, str]:
+    if TEMPLATE_PATH.exists():
+        try:
+            return json.loads(TEMPLATE_PATH.read_text())
+        except Exception:
+            pass
+    return {
+        "base": (
+            "{region_name} ({crop_type}) ‚Äî {month}: SPI {spi}, NDVI {ndvi}, "
+            "soil moisture {soil}, temperature {temp}. {rule_summary} {model_desc}{practice}"
+        )
+    }
+
+
+__all__ = ["build_insights"]
+diff --git a/agent/rules/engine.py b/agent/rules/engine.py
new file mode 100644
index 0000000000000000000000000000000000000000..7c2a85f9ac2cac36932a5c3a2f0f438936ca058a
--- /dev/null
+++ b/agent/rules/engine.py
@@ -0,0 +1,185 @@
+"""Rule evaluation primitives for deterministic insight tagging."""
+
+from __future__ import annotations
+
+from dataclasses import dataclass
+from typing import Any, Iterable, Mapping, Sequence
+
+import math
+
+
+@dataclass
+class RuleCondition:
+    var: str
+    op: str
+    value: Any
+
+
+@dataclass
+class Rule:
+    id: str
+    label: str
+    conditions_all: Sequence[RuleCondition]
+    conditions_any: Sequence[RuleCondition]
+    critical: bool = False
+
+
+DEFAULT_RULES: list[Rule] = [
+    Rule(
+        id="drought",
+        label="SPI indicates severe dryness",
+        conditions_all=[RuleCondition("spi", "<", -1.5)],
+        conditions_any=[],
+        critical=True,
+    ),
+    Rule(
+        id="vegetation_stress",
+        label="NDVI anomaly signals canopy stress",
+        conditions_all=[RuleCondition("ndvi_anomaly", "<", -0.2)],
+        conditions_any=[],
+    ),
+    Rule(
+        id="soil_dryness",
+        label="Soil moisture below sustainable threshold",
+        conditions_all=[RuleCondition("soil_surface_moisture", "<", 0.12)],
+        conditions_any=[],
+        critical=True,
+    ),
+    Rule(
+        id="heat_extreme",
+        label="High mean temperatures",
+        conditions_all=[RuleCondition("temp_mean", ">", 35.0)],
+        conditions_any=[],
+    ),
+]
+
+
+CRITICAL_RULES = {rule.id for rule in DEFAULT_RULES if rule.critical}
+
+
+def evaluate_rules_row(row: Mapping[str, Any], rule_overrides: Mapping[str, Any] | Sequence[Mapping[str, Any]] | None = None) -> list[str]:
+    """Evaluate deterministic rules against a *row* and return hits."""
+
+    values = {str(k): row[k] for k in row.keys()}
+    rules = _merge_rules(rule_overrides)
+
+    hits: list[str] = []
+    for rule in rules:
+        if _rule_matches(rule, values):
+            message = _format_rule_message(rule, values)
+            hits.append(f"{rule.id}|{message}")
+    return hits
+
+
+def _merge_rules(rule_overrides: Mapping[str, Any] | Sequence[Mapping[str, Any]] | None) -> list[Rule]:
+    overrides: list[Rule] = []
+    if rule_overrides:
+        raw_rules: Iterable[Mapping[str, Any]]
+        if isinstance(rule_overrides, Mapping) and "rules" in rule_overrides:
+            raw_rules = rule_overrides["rules"]  # type: ignore[index]
+        elif isinstance(rule_overrides, Mapping):
+            raw_rules = [rule_overrides]
+        else:
+            raw_rules = rule_overrides  # type: ignore[assignment]
+
+        for spec in raw_rules:
+            try:
+                overrides.append(_normalise_rule(spec))
+            except Exception:
+                continue
+
+    merged: dict[str, Rule] = {rule.id: rule for rule in DEFAULT_RULES}
+    for rule in overrides:
+        merged[rule.id] = rule
+    return list(merged.values())
+
+
+def _normalise_rule(spec: Mapping[str, Any]) -> Rule:
+    rid = str(spec.get("id"))
+    label = str(spec.get("label", rid))
+    critical = bool(spec.get("critical", False))
+    conditions = spec.get("when", {})
+    all_conditions = [_parse_condition(entry) for entry in conditions.get("all", [])]
+    any_conditions = [_parse_condition(entry) for entry in conditions.get("any", [])]
+    return Rule(rid, label, all_conditions, any_conditions, critical)
+
+
+def _parse_condition(payload: Mapping[str, Any]) -> RuleCondition:
+    return RuleCondition(
+        var=str(payload.get("var")),
+        op=str(payload.get("op", "<")),
+        value=payload.get("value"),
+    )
+
+
+def _rule_matches(rule: Rule, row: Mapping[str, Any]) -> bool:
+    if not _conditions_match(rule.conditions_all, row, require_all=True):
+        return False
+    if rule.conditions_any and not _conditions_match(rule.conditions_any, row, require_all=False):
+        return False
+    return True
+
+
+def _conditions_match(conditions: Sequence[RuleCondition], row: Mapping[str, Any], *, require_all: bool) -> bool:
+    if not conditions:
+        return True
+    results = [_condition_matches(cond, row) for cond in conditions]
+    return all(results) if require_all else any(results)
+
+
+def _condition_matches(cond: RuleCondition, row: Mapping[str, Any]) -> bool:
+    value = row.get(cond.var)
+    if value is None or (isinstance(value, float) and math.isnan(value)):
+        return False
+    try:
+        value = float(value)
+    except Exception:
+        return False
+
+    target = cond.value
+    if isinstance(target, (list, tuple)) and len(target) == 2 and cond.op == "between":
+        lower, upper = float(target[0]), float(target[1])
+        return lower <= value <= upper
+
+    try:
+        threshold = float(target)
+    except Exception:
+        threshold = None
+
+    match cond.op:
+        case "<":
+            return threshold is not None and value < threshold
+        case "<=":
+            return threshold is not None and value <= threshold
+        case ">":
+            return threshold is not None and value > threshold
+        case ">=":
+            return threshold is not None and value >= threshold
+        case "abs>":
+            return threshold is not None and abs(value) > threshold
+        case _:
+            return False
+
+
+def _format_rule_message(rule: Rule, row: Mapping[str, Any]) -> str:
+    parts: list[str] = [rule.label]
+    for cond in rule.conditions_all:
+        if cond.var in row:
+            parts.append(f"{cond.var}={row[cond.var]:.2f}")
+    return "; ".join(parts)
+
+
+def parse_rule_hit(hit: str) -> tuple[str, str]:
+    if "|" in hit:
+        rid, message = hit.split("|", 1)
+        return rid, message
+    return hit, hit
+
+
+__all__ = [
+    "CRITICAL_RULES",
+    "DEFAULT_RULES",
+    "evaluate_rules_row",
+    "parse_rule_hit",
+]
+diff --git a/docs/greenai_metrics.md b/docs/greenai_metrics.md
index cb20e164b5ee5fad4d7c34523e915e5cc9f4a80b..39428e3c99bd7050489114f56ae3b4fb73cdf504 100644
--- a/docs/greenai_metrics.md
+++ b/docs/greenai_metrics.md
@@ -1,25 +1,25 @@
 # Green AI Metrics
 
 The Hack4Earth challenge requires a **Scientific Carbon Impact (SCI)-style** comparison between a baseline and an optimised run for the same task.
 
 Minimum deliverables per region/run:
 
 1. `runtime_sec`
 2. `energy_kwh` (or proxy)
 3. `co2e_kg` with methodology note
 4. Hardware descriptor (CPU model, cores) and geographic region
 
 ### How to capture the metrics
 
 Wrap any command with the CodeCarbon helper:
 
 ```bash
 python engine/evaluate_greenai.py \
     --region hungary_transdanubia \
     --label baseline \
     --command "python scripts/train_region_model.py --region hungary_transdanubia --tier 1"
 ```
 
 This writes a JSON line under `models/<region>/greenai_runs.jsonl` with the required metrics and an execution log. Repeat with your optimised configuration (e.g., higher feature tier, tuned hyperparameters) and summarise the **before/after** in the submission notebook.
 
-For the carbon-aware bonus, record one of the runs during a lower-carbon window (e.g., UTC night for EU grids) or on Kaggle's `us-central1` CPU region and attach a screenshot/log of the scheduler time.
\ No newline at end of file
+For the carbon-aware bonus, record one of the runs during a lower-carbon window (e.g., UTC night for EU grids) or on a low-carbon cloud region and attach a screenshot/log of the scheduler time.diff --git a/docs/submission_notes.md b/docs/submission_notes.md
index e27fef6a5b9d26dd110c1ea3c02775f75fa32110..08990f019727993b5f1880ea1e8238481a62af47 100644
--- a/docs/submission_notes.md
+++ b/docs/submission_notes.md
@@ -1,3 +1,3 @@
 # Submission Notes
 
-Links to Kaggle notebook, dataset, and DoraHacks BUIDL.
\ No newline at end of file
+Links to project notebook, dataset bundle, and DoraHacks BUIDL.diff --git a/engine/__init__.py b/engine/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..844ff3ef452ce2723b605ad0aabdded52eb56b9d
--- /dev/null
+++ b/engine/__init__.py
@@ -0,0 +1,20 @@
+"""Lightweight engine utilities for the regional insight pipeline."""
+
+from __future__ import annotations
+
+import sys
+from pathlib import Path
+
+_ROOT = Path(__file__).resolve().parents[1]
+_SRC = _ROOT / "src"
+if _SRC.exists():
+    src_path = str(_SRC)
+    if src_path not in sys.path:
+        sys.path.insert(0, src_path)
+
+__all__ = [
+    "__version__",
+]
+
+__version__ = "0.1.0"
+diff --git a/engine/distill_insights.py b/engine/distill_insights.py
new file mode 100644
index 0000000000000000000000000000000000000000..f474e0c5cb57fad58423c4a0c26fc34b3e737b80
--- /dev/null
+++ b/engine/distill_insights.py
@@ -0,0 +1,110 @@
+"""Aggregate daily anomaly signals into monthly insight features."""
+
+from __future__ import annotations
+
+from pathlib import Path
+from typing import Dict, Iterable, Mapping
+
+import pandas as pd
+
+from regional_agent.config import get_region_current_dir, get_region_data_root
+
+from .model_predict import predict_outcomes
+
+OUTPUT_DIR = Path("outputs")
+
+
+def distill_region(region: str) -> str:
+    """Distil daily anomalies for *region* into a monthly summary table."""
+
+    source = _resolve_input_path(region)
+    df = pd.read_csv(source)
+    df = _prepare_dataframe(df)
+
+    if "month" not in df.columns:
+        raise ValueError("Distillation requires a 'month' column derived from dates.")
+
+    metric_map = _select_metric_columns(df)
+    agg_map: Dict[str, str] = {col: "mean" for col in metric_map.values() if col}
+    rename_map = {v: k for k, v in metric_map.items() if v}
+    if not agg_map:
+        numeric_cols = [col for col in df.select_dtypes(include=["number"]).columns if col != "month"]
+        agg_map = {col: "mean" for col in numeric_cols}
+        rename_map = {}
+    if not agg_map:
+        raise ValueError("No numeric columns available for distillation.")
+
+    grouped = df.groupby("month", as_index=False).agg(agg_map).rename(columns=rename_map).sort_values("month")
+
+    grouped["model_signal"] = predict_outcomes(region, grouped)
+
+    output_dir = OUTPUT_DIR / region
+    output_dir.mkdir(parents=True, exist_ok=True)
+    output_path = output_dir / "distilled_summary.csv"
+    grouped.to_csv(output_path, index=False)
+    return str(output_path)
+
+
+def _resolve_input_path(region: str) -> Path:
+    candidates = [
+        get_region_current_dir(region) / "daily_anomalies.csv",
+        get_region_current_dir(region) / "anomalies.csv",
+        get_region_data_root(region) / "anomalies.csv",
+    ]
+    for path in candidates:
+        if path.exists():
+            return path
+    raise FileNotFoundError(
+        f"No anomaly dataset found for '{region}'. Checked: "
+        + ", ".join(str(path) for path in candidates)
+    )
+
+
+def _prepare_dataframe(df: pd.DataFrame) -> pd.DataFrame:
+    df = df.copy()
+    date_column = None
+    for candidate in ("date", "timestamp", "day"):
+        if candidate in df.columns:
+            date_column = candidate
+            break
+    if date_column:
+        df[date_column] = pd.to_datetime(df[date_column])
+        df["month"] = df[date_column].dt.to_period("M").astype(str)
+    elif "month" in df.columns:
+        df["month"] = df["month"].astype(str)
+    return df
+
+
+def _select_metric_columns(df: pd.DataFrame) -> Mapping[str, str | None]:
+    lookup = {col.lower(): col for col in df.columns}
+
+    def pick(*candidates: str, contains: Iterable[str] | None = None) -> str | None:
+        contains = contains or []
+        for candidate in candidates:
+            if candidate in lookup:
+                return lookup[candidate]
+        for column in df.columns:
+            name = column.lower()
+            if all(token in name for token in contains):
+                return column
+        return None
+
+    return {
+        "spi": pick("spi", "spi_30", contains=("spi",)),
+        "ndvi_anomaly": pick("ndvi_anomaly", "ndvi_zscore", contains=("ndvi", "anom")),
+        "soil_surface_moisture": pick(
+            "soil_surface_moisture",
+            "soil_moisture",
+            contains=("soil", "moist"),
+        ),
+        "temp_mean": pick(
+            "temp_mean",
+            "t2m_mean",
+            "temperature_mean",
+            contains=("temp", "mean"),
+        ),
+    }
+
+
+__all__ = ["distill_region"]
+diff --git a/engine/model_predict.py b/engine/model_predict.py
new file mode 100644
index 0000000000000000000000000000000000000000..c3d6f0ccd032ba5c7ce5169fc98dc90f54b6a40a
--- /dev/null
+++ b/engine/model_predict.py
@@ -0,0 +1,153 @@
+"""Model signal helpers for the insight engine."""
+
+from __future__ import annotations
+
+from pathlib import Path
+from typing import Iterable
+
+import numpy as np
+import pandas as pd
+
+try:  # scikit-learn and joblib may not be present in minimal environments.
+    from joblib import dump, load
+    from sklearn.ensemble import RandomForestRegressor
+except Exception:  # pragma: no cover - degrade gracefully when unavailable
+    dump = load = None  # type: ignore[assignment]
+    RandomForestRegressor = None  # type: ignore[assignment]
+
+
+MODELS_DIR = Path(__file__).resolve().parents[1] / "models"
+
+
+def predict_outcomes(region: str, df: pd.DataFrame) -> np.ndarray:
+    """Return a 0-1 *model_signal* for every row in ``df``."""
+
+    if df.empty:
+        return np.zeros(0, dtype=float)
+
+    features = _prepare_features(df)
+    if features.empty:
+        return np.zeros(len(df), dtype=float)
+
+    model = _load_model(region)
+    if model is None:
+        model = _train_lightweight_model(region, features, df)
+
+    try:
+        raw_pred = np.asarray(model.predict(features))  # type: ignore[call-arg]
+    except Exception:
+        raw_pred = features.mean(axis=1).to_numpy()
+
+    return _normalise_signal(raw_pred)
+
+
+def _prepare_features(df: pd.DataFrame) -> pd.DataFrame:
+    numeric = df.select_dtypes(include=["number"]).copy()
+    for col in list(numeric.columns):
+        if col.lower() in {"model_signal"}:
+            numeric.drop(columns=col, inplace=True)
+    numeric = numeric.replace([np.inf, -np.inf], np.nan).fillna(method="ffill").fillna(method="bfill")
+    numeric = numeric.fillna(numeric.mean())
+    return numeric
+
+
+def _load_model(region: str):
+    if load is None:
+        return None
+
+    direct_path = MODELS_DIR / f"{region}_rf.pkl"
+    if direct_path.exists():
+        try:
+            return load(direct_path)
+        except Exception:
+            pass
+
+    nested_dir = MODELS_DIR / region
+    if nested_dir.is_dir():
+        candidates = sorted(nested_dir.glob("*.pkl"), key=lambda p: p.stat().st_mtime, reverse=True)
+        for path in candidates:
+            try:
+                return load(path)
+            except Exception:
+                continue
+    return None
+
+
+def _train_lightweight_model(region: str, features: pd.DataFrame, df: pd.DataFrame):
+    if RandomForestRegressor is None:
+        return _FallbackModel()
+
+    target_name = _choose_target(df)
+    if target_name is None or target_name not in df.columns:
+        return _FallbackModel()
+
+    target = df[target_name].replace([np.inf, -np.inf], np.nan).fillna(df[target_name].mean())
+    X = features.drop(columns=[c for c in features.columns if c == target_name], errors="ignore")
+
+    if X.empty:
+        return _FallbackModel()
+
+    model = RandomForestRegressor(n_estimators=80, random_state=42)
+    try:
+        model.fit(X, target)
+    except Exception:
+        return _FallbackModel()
+
+    if dump is not None:
+        MODELS_DIR.mkdir(parents=True, exist_ok=True)
+        out_path = MODELS_DIR / f"{region}_rf.pkl"
+        try:
+            dump(model, out_path)
+        except Exception:
+            pass
+    return model
+
+
+def _choose_target(df: pd.DataFrame) -> str | None:
+    candidates = [
+        "model_target",
+        "yield_anomaly",
+        "ndvi_anomaly",
+        "ndvi_zscore",
+        "spi",
+        "spi_30",
+        "soil_surface_moisture",
+    ]
+    for candidate in candidates:
+        if candidate in df.columns:
+            return candidate
+    numeric_cols = df.select_dtypes(include=["number"]).columns
+    return numeric_cols[0] if len(numeric_cols) else None
+
+
+def _normalise_signal(pred: Iterable[float]) -> np.ndarray:
+    arr = np.asarray(list(pred), dtype=float)
+    if arr.size == 0:
+        return arr
+
+    mask = np.isfinite(arr)
+    if not mask.any():
+        return np.zeros_like(arr)
+
+    finite = arr[mask]
+    p_low, p_high = np.percentile(finite, [5, 95]) if finite.size > 1 else (finite[0], finite[0])
+    if np.isclose(p_low, p_high):
+        scaled = (finite - finite.mean())
+        scaled = 0.5 + 0.1 * scaled
+    else:
+        scaled = (finite - p_low) / (p_high - p_low)
+    scaled = np.clip(scaled, 0.0, 1.0)
+    result = np.zeros_like(arr)
+    result[mask] = scaled
+    return result
+
+
+class _FallbackModel:
+    def predict(self, X: pd.DataFrame) -> np.ndarray:
+        series = X.mean(axis=1)
+        series = series.replace([np.inf, -np.inf], np.nan).fillna(series.mean())
+        return series.to_numpy()
+
+
+__all__ = ["predict_outcomes"]
+diff --git a/engine/utils/__init__.py b/engine/utils/__init__.py
new file mode 100644
index 0000000000000000000000000000000000000000..ccc58707ce16896befcdd27f2b57b89958073ed1
--- /dev/null
+++ b/engine/utils/__init__.py
@@ -0,0 +1,8 @@
+"""Utility helpers consumed by the insight engine."""
+
+from __future__ import annotations
+
+from .metadata import load_region_metadata, load_phenology_hints, update_metadata
+
+__all__ = ["load_region_metadata", "load_phenology_hints", "update_metadata"]
+diff --git a/engine/utils/metadata.py b/engine/utils/metadata.py
new file mode 100644
index 0000000000000000000000000000000000000000..a042c330f6cc79f3a17b82e1a1b08bb61612bbc9
--- /dev/null
+++ b/engine/utils/metadata.py
@@ -0,0 +1,128 @@
+"""Metadata helpers used throughout the insight engine pipeline."""
+
+from __future__ import annotations
+
+import json
+from pathlib import Path
+from typing import Any, Dict, Iterable, Mapping
+
+from regional_agent.config import (
+    get_region_current_dir,
+    load_region_profile,
+)
+
+try:
+    from typing import TypedDict
+except ImportError:  # pragma: no cover - Python <3.11 fallback
+    TypedDict = dict  # type: ignore[misc,assignment]
+
+
+def _as_list(value: Any) -> list[str]:
+    if value is None:
+        return []
+    if isinstance(value, (list, tuple, set)):
+        return [str(v) for v in value]
+    return [str(value)]
+
+
+class RegionMetadata(TypedDict, total=False):
+    """Normalized metadata payload for a region."""
+
+    region_key: str
+    region_name: str
+    country: str | None
+    bbox: list[float]
+    dominant_crops: list[str]
+    soil_type: str | None
+    management_system: str | None
+    notes: str | None
+    rule_overrides: list[dict[str, Any]]
+    practice_overrides: Mapping[str, Any]
+
+
+def load_region_metadata(region: str) -> RegionMetadata:
+    """Load metadata for *region*, applying opinionated defaults."""
+
+    profile = load_region_profile(region)
+    meta: Mapping[str, Any] = profile.get("region_meta", {})
+
+    region_key = str(meta.get("key", region))
+    region_name = str(meta.get("name", region.replace("_", " ").title()))
+    country = meta.get("country")
+    bbox = list(meta.get("bbox", []))
+    notes = meta.get("notes")
+
+    dominant_crops = _as_list(meta.get("crops") or profile.get("dominant_crops"))
+    soil_type = meta.get("soil_type") or profile.get("soil_type")
+    management = meta.get("management_system") or profile.get("management_system")
+
+    payload: RegionMetadata = {
+        "region_key": region_key,
+        "region_name": region_name,
+        "country": country,
+        "bbox": bbox,
+        "dominant_crops": dominant_crops,
+        "soil_type": soil_type,
+        "management_system": management,
+        "notes": notes,
+        "rule_overrides": list(profile.get("rules", [])),
+        "practice_overrides": profile.get("practices", {}) or {},
+    }
+
+    centroid = _compute_centroid(bbox) if bbox else None
+    if centroid:
+        payload["centroid"] = centroid  # type: ignore[index]
+
+    return payload
+
+
+def _compute_centroid(bbox: Iterable[float]) -> tuple[float, float]:
+    values = list(bbox)
+    if len(values) != 4:
+        raise ValueError("bbox must contain four values: [min_lon, min_lat, max_lon, max_lat]")
+    min_lon, min_lat, max_lon, max_lat = map(float, values)
+    return ((min_lat + max_lat) / 2.0, (min_lon + max_lon) / 2.0)
+
+
+def update_metadata(region: str, new_entries: Mapping[str, Any]) -> Path:
+    """Persist *new_entries* into ``metadata.json`` under the region cache.
+
+    This is the central hook for recording auxiliary metadata derived during
+    experimentation (e.g., regional mesh associations or prospective training
+    features). Downstream jobs can read the cached `metadata.json` alongside the
+    anomaly time series to build richer model corpora without requiring a
+    separate metadata export step.
+    """
+
+    target = get_region_current_dir(region) / "metadata.json"
+    existing: Dict[str, Any] = {}
+    if target.exists():
+        try:
+            existing = json.loads(target.read_text())
+        except Exception:  # pragma: no cover - resilient to partial writes
+            existing = {}
+    existing.update(dict(new_entries))
+    target.write_text(json.dumps(existing, indent=2, sort_keys=True))
+    return target
+
+
+def load_phenology_hints(region: str, metadata: RegionMetadata | None = None) -> Mapping[str, Any]:
+    """Load lightweight phenology hints for *region* if available."""
+
+    try:
+        from .phenology import build_phenology_hints
+    except Exception:
+        return {}
+
+    if metadata is None:
+        metadata = load_region_metadata(region)
+    return build_phenology_hints(region, metadata)
+
+
+__all__ = [
+    "RegionMetadata",
+    "load_region_metadata",
+    "load_phenology_hints",
+    "update_metadata",
+]
+diff --git a/engine/utils/phenology.py b/engine/utils/phenology.py
new file mode 100644
index 0000000000000000000000000000000000000000..9c0c0cf85863ee02e5e8e7135da6ebef6c5549a7
--- /dev/null
+++ b/engine/utils/phenology.py
@@ -0,0 +1,68 @@
+"""Lightweight phenology heuristics used when richer data is unavailable."""
+
+from __future__ import annotations
+
+from datetime import datetime
+from typing import Mapping
+
+
+def build_phenology_hints(region: str, metadata: Mapping[str, object] | None = None) -> Mapping[str, object]:
+    metadata = metadata or {}
+    crops = [c.lower() for c in metadata.get("dominant_crops", []) or []]
+    centroid = metadata.get("centroid")
+
+    lat = 0.0
+    if isinstance(centroid, (list, tuple)) and len(centroid) == 2:
+        lat = float(centroid[0])
+
+    hemisphere = "south" if lat < 0 else "north"
+    stage_map: dict[str, str] = {}
+    for month in range(1, 13):
+        stage_map[f"{month:02d}"] = _month_to_stage(month, hemisphere, crops)
+
+    current_month = datetime.utcnow().month
+    current_stage = stage_map[f"{current_month:02d}"]
+
+    return {
+        "hemisphere": hemisphere,
+        "stage_by_month": stage_map,
+        "current_stage": current_stage,
+    }
+
+
+def _month_to_stage(month: int, hemisphere: str, crops: list[str]) -> str:
+    """Map ``month`` to a broad phenological stage."""
+
+    # Coffee tends to have longer, overlapping stages. Provide a friendlier mapping.
+    if any("coffee" in crop for crop in crops):
+        return _coffee_stage(month, hemisphere)
+
+    offset = 0 if hemisphere == "north" else 6
+    phase = ((month + offset - 1) % 12) + 1
+    if phase in (12, 1, 2):
+        return "dormancy / field prep"
+    if phase in (3, 4):
+        return "emergence"
+    if phase in (5, 6, 7):
+        return "vegetative growth"
+    if phase in (8, 9):
+        return "reproductive"
+    return "harvest / post-harvest"
+
+
+def _coffee_stage(month: int, hemisphere: str) -> str:
+    offset = 0 if hemisphere == "north" else 6
+    phase = ((month + offset - 1) % 12) + 1
+    if phase in (11, 12, 1):
+        return "flowering"
+    if phase in (2, 3, 4):
+        return "fruit set"
+    if phase in (5, 6, 7):
+        return "bean fill"
+    if phase in (8, 9):
+        return "ripening"
+    return "harvest / resting"
+
+
+__all__ = ["build_phenology_hints"]
+diff --git a/README.md b/README.md
-index a5b7ea1283e710b4cd6f6e8b1d6fbf17afa42545..1b2dbb4f23aa2cb8d7a5a1f73c04fc195f21ace9 100644
---- a/README.md
-+++ b/README.md
-@@ -26,72 +26,161 @@ Together, these local engines form a **‚Äúmosaic‚Äù of regional intelligence** 
- ## ‚ôªÔ∏è Green AI Design
- Green AI here doesn‚Äôt just mean *energy efficient*.  
- It means **computationally regenerative** ‚Äî maximizing insight per watt, per byte, per decision.  
- The system‚Äôs design reduces both *climate modeling waste* and *decision latency* through three interlocking strategies:
- 
- 1. **Local Distillation for Global Efficiency**  
-    ‚Üí Instead of repeatedly processing petabytes of reanalysis data, each region runs a one-time distillation ‚Äî caching rainfall, temperature, and NDVI locally in compact, open formats (CSV/Zarr).  
-    ‚Üí This creates ‚Äúclimate slides‚Äù that can be reused, versioned, and extended across years or projects without rerunning full downloads.
- 
- 2. **Composable Regional Models**  
-    ‚Üí Random Forests trained in each region are small enough to run on CPUs, yet collectively form a *distributed ensemble* ‚Äî a green, federated alternative to energy-hungry large models.  
-    ‚Üí They can be merged, compared, or retrained incrementally to build a global climate-learning network without centralized compute or cloud lock-in.
- 
- 3. **Human‚ÄìMachine Efficiency Loop**  
-    ‚Üí Every model serves a *decision-support function* ‚Äî not abstract prediction.  
-    ‚Üí Farmers, DAOs, or research networks get immediate insight: ‚Äúthis rainfall anomaly aligns with below-normal NDVI recovery,‚Äù creating feedback that improves adaptation strategies *and* future training data.
- 
- The result is a system that turns global climate data into *regional intelligence assets* ‚Äî **small, composable, human-useful models that waste nothing**: not data, not compute, not insight.
- 
- ---
- 
- ## üß© Pilot Regions
- 
- | Region | Context | Focus |
- |--------|----------|--------|
--| üá≠üá∫ **Hungary Farmland** | Temperate, mixed cropping | Climate variability and soil moisture response |
-+| üá≠üá∫ **Transdanubia Wheat Belt** | Temperate, mixed cropping | Climate variability and soil moisture response |
- | üáØüá≤ **Jamaica Coffee Belt** | Tropical, high-elevation | Shade dynamics and rainfall anomalies |
- 
- ---
- 
- ## üåê Regional Insight Mesh
- The long-term vision is a **network of regional agents**, each acting as a ‚Äúclimate node‚Äù trained on localized data, yet interoperable through shared metadata and features.
- 
- - Each region distills global datasets into its own **climate cache** ‚Äî CHIRPS rainfall, ERA5 reanalysis, NDVI composites, and local context.  
- - Each cache trains its own lightweight Random Forest model, producing interpretable regional logic.  
- - These regional models can then be **linked or aggregated** into a *global insight mesh* ‚Äî a distributed knowledge fabric that learns through connection and reuse.  
- 
- This architecture enables:
- - **Energy reduction** through one-time regional computation and long-term reuse.  
- - **Participatory enrichment** by allowing cooperatives and researchers to contribute local data or retraining triggers.  
- - **Interoperability** between models, where shared climate and practice features can be queried like microservices.  
- 
- The mesh expands through regional connection and reuse, forming a **planetary network of small, efficient climate AIs** whose combined insight grows with every new region added.
- 
- ---
- 
- ## ‚öôÔ∏è Architecture
--(Global datasets) --> [Regional Distillation Engine] --> [Local Cache]
--      |                           |
--      v                           v
-- [CHIRPS, ERA5, MODIS]       [SPI, GDD, NDVI, VPD Features]
--      |                           |
--      v                           v
-- [Crop & Soil Data] --> [Agent Reasoning] --> [Insight Cards / Emissions Log]
-+
-+```mermaid
-+%% See docs/architecture_diagram.mmd for an editable copy
-+flowchart TD
-+    A[Global Climate Datasets\nCHIRPS ¬∑ ERA5 ¬∑ MODIS ¬∑ SoilGrids] --> B[Regional Distillation Engine\nfetch_* scripts]
-+    A --> C[Context Libraries\nCrop calendars ¬∑ Phenology ¬∑ Practices]
-+    B --> D[Regional Cache\nCSV / Parquet]
-+    C --> D
-+    D --> E[Feature Builder\nTiered features]
-+    E --> F[Random Forest Models\nTiered metrics]
-+    D --> G[Anomaly + Insight Engine\nSPI ¬∑ NDVI ¬∑ Rules]
-+    F --> G
-+    G --> H[Insight Workspace\nregions/workspaces/<region>]
-+    G --> I[Green AI Logs\nCodeCarbon]
-+```
- 
- ---
- 
- ## üß≠ Setup & Reproducibility
--git clone https://github.com/itsmoagain/regional-agent-hack.git  
--cd regional-agent-hack  
--pip install -r requirements.txt  
--python scripts/build_region_cache.py --region hungary_farmland --track  
- 
--> Recommended Python version: **3.12.x**  
--> Compatible with Kaggle and GitHub Actions runners.
-+> Recommended Python version: **3.11+** (tested on Kaggle CPUs and GitHub Actions runners).
-+
-+### 1. Clone & install
-+
-+```bash
-+git clone https://github.com/itsmoagain/regional-agent-hack.git
-+cd regional-agent-hack
-+pip install -r requirements.txt
-+```
-+
-+### 2. Authenticate data sources (one time)
-+
-+Some fetchers rely on Google Earth Engine (GEE). From the repo root run:
-+
-+```bash
-+python scripts/gee_setup.py --project <your_gee_project>
-+```
-+
-+The command prints the OAuth URL you must visit. Paste the token back into the terminal and the credentials will be cached under `~/.config/earthengine/`.
-+
-+### 3. Launch the region wizard
-+
-+```bash
-+python scripts/setup_new_region.py
-+```
-+
-+The wizard collects:
-+
-+1. Region key (e.g. `hungary_transdanubia`).
-+2. Bounding box (`min_lon min_lat max_lon max_lat`).
-+3. Crop selection (from `config/crop_library.yml`).
-+4. Optional practice log metadata.
-+
-+It scaffolds:
-+
-+- `regions/profiles/insight.<region>.yml` (extending `insight.defaults.yml`).
-+- `regions/workspaces/<region>/` workspace for interactive agent runs.
-+- `data/<region>/` directories.
-+- Cached phenology templates derived from the crop library.
-+
-+### 4. Build the climate cache
-+
-+```bash
-+python scripts/build_region_cache.py --region <region_key>
-+```
-+
-+The cache builder will:
-+
-+- Reuse any existing CSVs in `data/<region_key>/`.
-+- Auto-fetch missing datasets with CPU-only fetchers:
-+  - `fetch_chirps_gee.py` (precipitation)
-+  - `fetch_soil_gee.py` (surface/root-zone moisture)
-+  - `fetch_ndvi_gee.py` (MODIS NDVI)
-+  - `fetch_openmeteo.py` (temperature baselines)
-+
-+Outputs land in `daily_merged.csv` and `monthly_merged.csv`, with provenance logged in `metadata.json`.
-+
-+### 5. Generate insights & models
-+
-+```bash
-+python scripts/build_region_insights.py --region <region_key>
-+python scripts/train_region_model.py --region <region_key> --tier 2 --freq monthly
-+python scripts/flag_anomalies.py --region <region_key>
-+```
-+
-+If you run the onboarding wizard (`python scripts/setup_new_region.py`) these commands are executed automatically: once the
-+cache is ready the wizard calls `build_region_insights.py`, which emits `data/<region_key>/insights_daily.csv` (when daily data exists)
-+or `insights_monthly.csv`. The reference regions bundled in `regions/profiles/insight.hungary_transdanubia.yml` and
-+`regions/profiles/insight.jamaica_coffee.yml` therefore produce their insight tables immediately, exactly as a user-specified AOI would.
-+
-+`train_region_model.py` now adapts to both the legacy `insight_*.csv` naming and the new `insights_*.csv` format. Feature builds are tiered (core climate ‚Üí +phenology ‚Üí +context) and the Random Forest artifacts are stored under `models/<region_key>/` with feature importances and metrics JSON.
-+
-+Every automated step also mirrors key artifacts into `regions/workspaces/<region_key>/` so you have a clean, dedicated sandbox for dashboards, notebooks, or further agent experimentation without touching the canonical data cache.
-+
-+### 6. Track Green-AI runs
-+
-+For Hackathon submissions include paired *baseline* and *optimized* runs. Use `engine/evaluate_greenai.py` to wrap the command you are profiling:
-+
-+```bash
-+python engine/evaluate_greenai.py --region <region_key> --command "python scripts/train_region_model.py --region <region_key> --tier 2"
-+```
-+
-+The wrapper records `runtime_sec`, `energy_kwh` (CodeCarbon proxy), hardware, and `co2e_kg` so you can compose the before/after summary required by the competition rubric.
-+
-+### 7. Notebook reproduction
-+
-+Kaggle- or Devpost-ready walkthroughs live in `notebooks/pipeline_demo.ipynb`. Switch the `REGION` variable between `hungary_transdanubia` and `jamaica_coffee` to demonstrate reproducibility across both flagship AOIs.
- 
- ---
- 
- ## ‚ú≥Ô∏è Credits
- **Developed by Morgan Urich**  
- Hack4Earth Green AI Olympiad 2025 ‚Äì Budapest  
- *Reproducible, ethical, and locally grounded climate computation.*
-diff --git a/config/crop_library.yml b/config/crop_library.yml
-new file mode 100644
-index 0000000000000000000000000000000000000000..536aab50a6c4b2b9fcf555b3121c43f7002c86c9
---- /dev/null
-+++ b/config/crop_library.yml
-@@ -0,0 +1,1146 @@
-+# Canonical crop library grouped by production system.
-+# Each entry supplies metadata used by the setup wizard and phenology builders.
-+Rainfed Cereals:
-+  - name: Wheat
-+    sci_name: Triticum aestivum
-+    fao_code: 101
-+    cycle_days: 120
-+    season_start: 90
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Durum Wheat
-+    sci_name: Triticum turgidum
-+    fao_code: 102
-+    cycle_days: 125
-+    season_start: 90
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Barley
-+    sci_name: Hordeum vulgare
-+    fao_code: 103
-+    cycle_days: 110
-+    season_start: 85
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Oats
-+    sci_name: Avena sativa
-+    fao_code: 104
-+    cycle_days: 105
-+    season_start: 90
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Rye
-+    sci_name: Secale cereale
-+    fao_code: 105
-+    cycle_days: 115
-+    season_start: 80
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Triticale
-+    sci_name: Triticosecale
-+    fao_code: 106
-+    cycle_days: 115
-+    season_start: 85
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Maize
-+    sci_name: Zea mays
-+    fao_code: 107
-+    cycle_days: 120
-+    season_start: 100
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Sorghum
-+    sci_name: Sorghum bicolor
-+    fao_code: 108
-+    cycle_days: 125
-+    season_start: 100
-+    season_end: 260
-+    source: FAO Crop Calendar
-+  - name: Pearl Millet
-+    sci_name: Pennisetum glaucum
-+    fao_code: 109
-+    cycle_days: 105
-+    season_start: 95
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Finger Millet
-+    sci_name: Eleusine coracana
-+    fao_code: 110
-+    cycle_days: 110
-+    season_start: 95
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Proso Millet
-+    sci_name: Panicum miliaceum
-+    fao_code: 111
-+    cycle_days: 95
-+    season_start: 90
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Foxtail Millet
-+    sci_name: Setaria italica
-+    fao_code: 112
-+    cycle_days: 95
-+    season_start: 85
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Teff
-+    sci_name: Eragrostis tef
-+    fao_code: 113
-+    cycle_days: 95
-+    season_start: 100
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Quinoa
-+    sci_name: Chenopodium quinoa
-+    fao_code: 114
-+    cycle_days: 115
-+    season_start: 85
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Buckwheat
-+    sci_name: Fagopyrum esculentum
-+    fao_code: 115
-+    cycle_days: 90
-+    season_start: 95
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Fonio
-+    sci_name: Digitaria exilis
-+    fao_code: 116
-+    cycle_days: 90
-+    season_start: 100
-+    season_end: 220
-+    source: FAO Crop Calendar
-+Irrigated & Paddy Rice:
-+  - name: Lowland Rice
-+    sci_name: Oryza sativa
-+    fao_code: 201
-+    cycle_days: 140
-+    season_start: 90
-+    season_end: 260
-+    source: FAO Crop Calendar
-+  - name: Upland Rice
-+    sci_name: Oryza sativa
-+    fao_code: 202
-+    cycle_days: 130
-+    season_start: 90
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Deepwater Rice
-+    sci_name: Oryza sativa
-+    fao_code: 203
-+    cycle_days: 170
-+    season_start: 80
-+    season_end: 270
-+    source: FAO Crop Calendar
-+  - name: Boro Rice
-+    sci_name: Oryza sativa
-+    fao_code: 204
-+    cycle_days: 150
-+    season_start: 10
-+    season_end: 170
-+    source: FAO Crop Calendar
-+  - name: Aman Rice
-+    sci_name: Oryza sativa
-+    fao_code: 205
-+    cycle_days: 160
-+    season_start: 180
-+    season_end: 340
-+    source: FAO Crop Calendar
-+  - name: Aus Rice
-+    sci_name: Oryza sativa
-+    fao_code: 206
-+    cycle_days: 125
-+    season_start: 120
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Aromatic Rice
-+    sci_name: Oryza sativa
-+    fao_code: 207
-+    cycle_days: 150
-+    season_start: 100
-+    season_end: 260
-+    source: FAO Crop Calendar
-+  - name: Glutinous Rice
-+    sci_name: Oryza sativa var. glutinosa
-+    fao_code: 208
-+    cycle_days: 145
-+    season_start: 95
-+    season_end: 255
-+    source: FAO Crop Calendar
-+Pulses & Food Legumes:
-+  - name: Chickpea
-+    sci_name: Cicer arietinum
-+    fao_code: 301
-+    cycle_days: 120
-+    season_start: 90
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Lentil
-+    sci_name: Lens culinaris
-+    fao_code: 302
-+    cycle_days: 110
-+    season_start: 80
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Common Bean
-+    sci_name: Phaseolus vulgaris
-+    fao_code: 303
-+    cycle_days: 95
-+    season_start: 100
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Lima Bean
-+    sci_name: Phaseolus lunatus
-+    fao_code: 304
-+    cycle_days: 105
-+    season_start: 100
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Tepary Bean
-+    sci_name: Phaseolus acutifolius
-+    fao_code: 305
-+    cycle_days: 90
-+    season_start: 95
-+    season_end: 215
-+    source: FAO Crop Calendar
-+  - name: Scarlet Runner Bean
-+    sci_name: Phaseolus coccineus
-+    fao_code: 306
-+    cycle_days: 120
-+    season_start: 100
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Pigeon Pea
-+    sci_name: Cajanus cajan
-+    fao_code: 307
-+    cycle_days: 160
-+    season_start: 90
-+    season_end: 260
-+    source: FAO Crop Calendar
-+  - name: Cowpea
-+    sci_name: Vigna unguiculata
-+    fao_code: 308
-+    cycle_days: 95
-+    season_start: 95
-+    season_end: 215
-+    source: FAO Crop Calendar
-+  - name: Mung Bean
-+    sci_name: Vigna radiata
-+    fao_code: 309
-+    cycle_days: 85
-+    season_start: 100
-+    season_end: 205
-+    source: FAO Crop Calendar
-+  - name: Adzuki Bean
-+    sci_name: Vigna angularis
-+    fao_code: 310
-+    cycle_days: 95
-+    season_start: 95
-+    season_end: 215
-+    source: FAO Crop Calendar
-+  - name: Black Gram
-+    sci_name: Vigna mungo
-+    fao_code: 311
-+    cycle_days: 90
-+    season_start: 95
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Bambara Groundnut
-+    sci_name: Vigna subterranea
-+    fao_code: 312
-+    cycle_days: 140
-+    season_start: 95
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Yardlong Bean
-+    sci_name: Vigna unguiculata subsp. sesquipedalis
-+    fao_code: 313
-+    cycle_days: 90
-+    season_start: 100
-+    season_end: 215
-+    source: FAO Crop Calendar
-+  - name: Winged Bean
-+    sci_name: Psophocarpus tetragonolobus
-+    fao_code: 314
-+    cycle_days: 150
-+    season_start: 90
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Lablab Bean
-+    sci_name: Lablab purpureus
-+    fao_code: 315
-+    cycle_days: 150
-+    season_start: 90
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Sword Bean
-+    sci_name: Canavalia gladiata
-+    fao_code: 316
-+    cycle_days: 160
-+    season_start: 95
-+    season_end: 255
-+    source: FAO Crop Calendar
-+  - name: Jack Bean
-+    sci_name: Canavalia ensiformis
-+    fao_code: 317
-+    cycle_days: 160
-+    season_start: 95
-+    season_end: 255
-+    source: FAO Crop Calendar
-+  - name: Faba Bean
-+    sci_name: Vicia faba
-+    fao_code: 318
-+    cycle_days: 120
-+    season_start: 85
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Field Pea
-+    sci_name: Pisum sativum
-+    fao_code: 319
-+    cycle_days: 110
-+    season_start: 80
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Grass Pea
-+    sci_name: Lathyrus sativus
-+    fao_code: 320
-+    cycle_days: 115
-+    season_start: 85
-+    season_end: 225
-+    source: FAO Crop Calendar
-+Oilseeds & Industrial Crops:
-+  - name: Soybean
-+    sci_name: Glycine max
-+    fao_code: 401
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Sunflower
-+    sci_name: Helianthus annuus
-+    fao_code: 402
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Rapeseed
-+    sci_name: Brassica napus
-+    fao_code: 403
-+    cycle_days: 135
-+    season_start: 80
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Mustard
-+    sci_name: Brassica juncea
-+    fao_code: 404
-+    cycle_days: 110
-+    season_start: 80
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Groundnut
-+    sci_name: Arachis hypogaea
-+    fao_code: 405
-+    cycle_days: 120
-+    season_start: 100
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Sesame
-+    sci_name: Sesamum indicum
-+    fao_code: 406
-+    cycle_days: 105
-+    season_start: 95
-+    season_end: 225
-+    source: FAO Crop Calendar
-+  - name: Linseed
-+    sci_name: Linum usitatissimum
-+    fao_code: 407
-+    cycle_days: 115
-+    season_start: 85
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Safflower
-+    sci_name: Carthamus tinctorius
-+    fao_code: 408
-+    cycle_days: 130
-+    season_start: 85
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Niger Seed
-+    sci_name: Guizotia abyssinica
-+    fao_code: 409
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Castor
-+    sci_name: Ricinus communis
-+    fao_code: 410
-+    cycle_days: 180
-+    season_start: 95
-+    season_end: 275
-+    source: FAO Crop Calendar
-+  - name: Camelina
-+    sci_name: Camelina sativa
-+    fao_code: 411
-+    cycle_days: 95
-+    season_start: 80
-+    season_end: 205
-+    source: FAO Crop Calendar
-+  - name: Jatropha
-+    sci_name: Jatropha curcas
-+    fao_code: 412
-+    cycle_days: 300
-+    season_start: 70
-+    season_end: 330
-+    source: FAO Crop Calendar
-+  - name: Oil Palm
-+    sci_name: Elaeis guineensis
-+    fao_code: 413
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Coconut
-+    sci_name: Cocos nucifera
-+    fao_code: 414
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Cottonseed
-+    sci_name: Gossypium hirsutum
-+    fao_code: 415
-+    cycle_days: 170
-+    season_start: 90
-+    season_end: 260
-+    source: FAO Crop Calendar
-+  - name: Poppy
-+    sci_name: Papaver somniferum
-+    fao_code: 416
-+    cycle_days: 120
-+    season_start: 85
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Perilla
-+    sci_name: Perilla frutescens
-+    fao_code: 417
-+    cycle_days: 110
-+    season_start: 95
-+    season_end: 225
-+    source: FAO Crop Calendar
-+  - name: Evening Primrose
-+    sci_name: Oenothera biennis
-+    fao_code: 418
-+    cycle_days: 150
-+    season_start: 90
-+    season_end: 240
-+    source: FAO Crop Calendar
-+Roots, Tubers & Rhizomes:
-+  - name: Potato
-+    sci_name: Solanum tuberosum
-+    fao_code: 501
-+    cycle_days: 130
-+    season_start: 90
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Sweet Potato
-+    sci_name: Ipomoea batatas
-+    fao_code: 502
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Cassava
-+    sci_name: Manihot esculenta
-+    fao_code: 503
-+    cycle_days: 300
-+    season_start: 1
-+    season_end: 300
-+    source: FAO Crop Calendar
-+  - name: Yam
-+    sci_name: Dioscorea rotundata
-+    fao_code: 504
-+    cycle_days: 210
-+    season_start: 60
-+    season_end: 270
-+    source: FAO Crop Calendar
-+  - name: Taro
-+    sci_name: Colocasia esculenta
-+    fao_code: 505
-+    cycle_days: 240
-+    season_start: 60
-+    season_end: 300
-+    source: FAO Crop Calendar
-+  - name: Cocoyam
-+    sci_name: Xanthosoma sagittifolium
-+    fao_code: 506
-+    cycle_days: 240
-+    season_start: 60
-+    season_end: 300
-+    source: FAO Crop Calendar
-+  - name: Jerusalem Artichoke
-+    sci_name: Helianthus tuberosus
-+    fao_code: 507
-+    cycle_days: 130
-+    season_start: 90
-+    season_end: 235
-+    source: FAO Crop Calendar
-+  - name: Arrowroot
-+    sci_name: Maranta arundinacea
-+    fao_code: 508
-+    cycle_days: 250
-+    season_start: 70
-+    season_end: 320
-+    source: FAO Crop Calendar
-+  - name: Lotus Root
-+    sci_name: Nelumbo nucifera
-+    fao_code: 509
-+    cycle_days: 180
-+    season_start: 70
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Ginger
-+    sci_name: Zingiber officinale
-+    fao_code: 510
-+    cycle_days: 240
-+    season_start: 60
-+    season_end: 300
-+    source: FAO Crop Calendar
-+  - name: Turmeric
-+    sci_name: Curcuma longa
-+    fao_code: 511
-+    cycle_days: 240
-+    season_start: 60
-+    season_end: 300
-+    source: FAO Crop Calendar
-+  - name: Beetroot
-+    sci_name: Beta vulgaris
-+    fao_code: 512
-+    cycle_days: 110
-+    season_start: 80
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Carrot
-+    sci_name: Daucus carota
-+    fao_code: 513
-+    cycle_days: 100
-+    season_start: 80
-+    season_end: 200
-+    source: FAO Crop Calendar
-+  - name: Radish
-+    sci_name: Raphanus sativus
-+    fao_code: 514
-+    cycle_days: 70
-+    season_start: 60
-+    season_end: 150
-+    source: FAO Crop Calendar
-+Vegetables & Culinary Herbs:
-+  - name: Tomato
-+    sci_name: Solanum lycopersicum
-+    fao_code: 601
-+    cycle_days: 110
-+    season_start: 95
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Bell Pepper
-+    sci_name: Capsicum annuum var. grossum
-+    fao_code: 602
-+    cycle_days: 130
-+    season_start: 100
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Chili Pepper
-+    sci_name: Capsicum chinense
-+    fao_code: 603
-+    cycle_days: 150
-+    season_start: 100
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Eggplant
-+    sci_name: Solanum melongena
-+    fao_code: 604
-+    cycle_days: 140
-+    season_start: 100
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Cucumber
-+    sci_name: Cucumis sativus
-+    fao_code: 605
-+    cycle_days: 70
-+    season_start: 90
-+    season_end: 170
-+    source: FAO Crop Calendar
-+  - name: Zucchini
-+    sci_name: Cucurbita pepo var. cylindrica
-+    fao_code: 606
-+    cycle_days: 65
-+    season_start: 90
-+    season_end: 165
-+    source: FAO Crop Calendar
-+  - name: Pumpkin
-+    sci_name: Cucurbita maxima
-+    fao_code: 607
-+    cycle_days: 130
-+    season_start: 90
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Butternut Squash
-+    sci_name: Cucurbita moschata
-+    fao_code: 608
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Watermelon
-+    sci_name: Citrullus lanatus
-+    fao_code: 609
-+    cycle_days: 100
-+    season_start: 95
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Cantaloupe
-+    sci_name: Cucumis melo
-+    fao_code: 610
-+    cycle_days: 95
-+    season_start: 95
-+    season_end: 205
-+    source: FAO Crop Calendar
-+  - name: Cabbage
-+    sci_name: Brassica oleracea var. capitata
-+    fao_code: 611
-+    cycle_days: 110
-+    season_start: 80
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Cauliflower
-+    sci_name: Brassica oleracea var. botrytis
-+    fao_code: 612
-+    cycle_days: 110
-+    season_start: 80
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Broccoli
-+    sci_name: Brassica oleracea var. italica
-+    fao_code: 613
-+    cycle_days: 90
-+    season_start: 80
-+    season_end: 200
-+    source: FAO Crop Calendar
-+  - name: Kale
-+    sci_name: Brassica oleracea var. sabellica
-+    fao_code: 614
-+    cycle_days: 75
-+    season_start: 70
-+    season_end: 180
-+    source: FAO Crop Calendar
-+  - name: Collard Greens
-+    sci_name: Brassica oleracea var. viridis
-+    fao_code: 615
-+    cycle_days: 90
-+    season_start: 75
-+    season_end: 200
-+    source: FAO Crop Calendar
-+  - name: Lettuce
-+    sci_name: Lactuca sativa
-+    fao_code: 616
-+    cycle_days: 60
-+    season_start: 70
-+    season_end: 150
-+    source: FAO Crop Calendar
-+  - name: Spinach
-+    sci_name: Spinacia oleracea
-+    fao_code: 617
-+    cycle_days: 55
-+    season_start: 65
-+    season_end: 140
-+    source: FAO Crop Calendar
-+  - name: Swiss Chard
-+    sci_name: Beta vulgaris subsp. cicla
-+    fao_code: 618
-+    cycle_days: 70
-+    season_start: 70
-+    season_end: 160
-+    source: FAO Crop Calendar
-+  - name: Arugula
-+    sci_name: Eruca sativa
-+    fao_code: 619
-+    cycle_days: 45
-+    season_start: 60
-+    season_end: 130
-+    source: FAO Crop Calendar
-+  - name: Celery
-+    sci_name: Apium graveolens
-+    fao_code: 620
-+    cycle_days: 130
-+    season_start: 90
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Fennel
-+    sci_name: Foeniculum vulgare
-+    fao_code: 621
-+    cycle_days: 120
-+    season_start: 90
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Onion
-+    sci_name: Allium cepa
-+    fao_code: 622
-+    cycle_days: 150
-+    season_start: 70
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Garlic
-+    sci_name: Allium sativum
-+    fao_code: 623
-+    cycle_days: 210
-+    season_start: 40
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Leek
-+    sci_name: Allium ampeloprasum
-+    fao_code: 624
-+    cycle_days: 150
-+    season_start: 70
-+    season_end: 230
-+    source: FAO Crop Calendar
-+  - name: Shallot
-+    sci_name: Allium cepa var. aggregatum
-+    fao_code: 625
-+    cycle_days: 120
-+    season_start: 70
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Scallion
-+    sci_name: Allium fistulosum
-+    fao_code: 626
-+    cycle_days: 70
-+    season_start: 60
-+    season_end: 150
-+    source: FAO Crop Calendar
-+  - name: Okra
-+    sci_name: Abelmoschus esculentus
-+    fao_code: 627
-+    cycle_days: 110
-+    season_start: 100
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Bitter Gourd
-+    sci_name: Momordica charantia
-+    fao_code: 628
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Bottle Gourd
-+    sci_name: Lagenaria siceraria
-+    fao_code: 629
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Sponge Gourd
-+    sci_name: Luffa aegyptiaca
-+    fao_code: 630
-+    cycle_days: 120
-+    season_start: 95
-+    season_end: 220
-+    source: FAO Crop Calendar
-+Fruits, Nuts & Tree Crops:
-+  - name: Apple
-+    sci_name: Malus domestica
-+    fao_code: 701
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Pear
-+    sci_name: Pyrus communis
-+    fao_code: 702
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Peach
-+    sci_name: Prunus persica
-+    fao_code: 703
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Plum
-+    sci_name: Prunus domestica
-+    fao_code: 704
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Apricot
-+    sci_name: Prunus armeniaca
-+    fao_code: 705
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Cherry
-+    sci_name: Prunus avium
-+    fao_code: 706
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Nectarine
-+    sci_name: Prunus persica var. nucipersica
-+    fao_code: 707
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Grape
-+    sci_name: Vitis vinifera
-+    fao_code: 708
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Kiwi
-+    sci_name: Actinidia deliciosa
-+    fao_code: 709
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Strawberry
-+    sci_name: Fragaria √ó ananassa
-+    fao_code: 710
-+    cycle_days: 180
-+    season_start: 30
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Raspberry
-+    sci_name: Rubus idaeus
-+    fao_code: 711
-+    cycle_days: 210
-+    season_start: 1
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Blueberry
-+    sci_name: Vaccinium corymbosum
-+    fao_code: 712
-+    cycle_days: 210
-+    season_start: 1
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Blackberry
-+    sci_name: Rubus fruticosus
-+    fao_code: 713
-+    cycle_days: 210
-+    season_start: 1
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Cranberry
-+    sci_name: Vaccinium macrocarpon
-+    fao_code: 714
-+    cycle_days: 210
-+    season_start: 1
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Pomegranate
-+    sci_name: Punica granatum
-+    fao_code: 715
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Fig
-+    sci_name: Ficus carica
-+    fao_code: 716
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Date Palm
-+    sci_name: Phoenix dactylifera
-+    fao_code: 717
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Olive
-+    sci_name: Olea europaea
-+    fao_code: 718
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Almond
-+    sci_name: Prunus dulcis
-+    fao_code: 719
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Walnut
-+    sci_name: Juglans regia
-+    fao_code: 720
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Hazelnut
-+    sci_name: Corylus avellana
-+    fao_code: 721
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Pistachio
-+    sci_name: Pistacia vera
-+    fao_code: 722
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Mango
-+    sci_name: Mangifera indica
-+    fao_code: 723
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Papaya
-+    sci_name: Carica papaya
-+    fao_code: 724
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Banana
-+    sci_name: Musa acuminata
-+    fao_code: 725
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Plantain
-+    sci_name: Musa √ó paradisiaca
-+    fao_code: 726
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+Plantation & Stimulant Crops:
-+  - name: Arabica Coffee
-+    sci_name: Coffea arabica
-+    fao_code: 801
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Robusta Coffee
-+    sci_name: Coffea canephora
-+    fao_code: 802
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Cocoa
-+    sci_name: Theobroma cacao
-+    fao_code: 803
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Tea
-+    sci_name: Camellia sinensis
-+    fao_code: 804
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Sugarcane
-+    sci_name: Saccharum officinarum
-+    fao_code: 805
-+    cycle_days: 360
-+    season_start: 1
-+    season_end: 330
-+    source: FAO Crop Calendar
-+  - name: Rubber
-+    sci_name: Hevea brasiliensis
-+    fao_code: 806
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Tobacco
-+    sci_name: Nicotiana tabacum
-+    fao_code: 807
-+    cycle_days: 120
-+    season_start: 80
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Vanilla
-+    sci_name: Vanilla planifolia
-+    fao_code: 808
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Kola Nut
-+    sci_name: Cola acuminata
-+    fao_code: 809
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Guarana
-+    sci_name: Paullinia cupana
-+    fao_code: 810
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+Forage & Pasture:
-+  - name: Alfalfa
-+    sci_name: Medicago sativa
-+    fao_code: 901
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Red Clover
-+    sci_name: Trifolium pratense
-+    fao_code: 902
-+    cycle_days: 250
-+    season_start: 1
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: White Clover
-+    sci_name: Trifolium repens
-+    fao_code: 903
-+    cycle_days: 250
-+    season_start: 1
-+    season_end: 250
-+    source: FAO Crop Calendar
-+  - name: Timothy Grass
-+    sci_name: Phleum pratense
-+    fao_code: 904
-+    cycle_days: 140
-+    season_start: 60
-+    season_end: 200
-+    source: FAO Crop Calendar
-+  - name: Perennial Ryegrass
-+    sci_name: Lolium perenne
-+    fao_code: 905
-+    cycle_days: 120
-+    season_start: 60
-+    season_end: 180
-+    source: FAO Crop Calendar
-+  - name: Tall Fescue
-+    sci_name: Festuca arundinacea
-+    fao_code: 906
-+    cycle_days: 150
-+    season_start: 60
-+    season_end: 210
-+    source: FAO Crop Calendar
-+  - name: Bermuda Grass
-+    sci_name: Cynodon dactylon
-+    fao_code: 907
-+    cycle_days: 200
-+    season_start: 40
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Napier Grass
-+    sci_name: Pennisetum purpureum
-+    fao_code: 908
-+    cycle_days: 240
-+    season_start: 1
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Sorghum-Sudan Grass
-+    sci_name: Sorghum bicolor √ó S. sudanense
-+    fao_code: 909
-+    cycle_days: 120
-+    season_start: 80
-+    season_end: 200
-+    source: FAO Crop Calendar
-+  - name: Switchgrass
-+    sci_name: Panicum virgatum
-+    fao_code: 910
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+Fiber & Bioindustrial:
-+  - name: Cotton
-+    sci_name: Gossypium hirsutum
-+    fao_code: 1001
-+    cycle_days: 170
-+    season_start: 90
-+    season_end: 260
-+    source: FAO Crop Calendar
-+  - name: Kenaf
-+    sci_name: Hibiscus cannabinus
-+    fao_code: 1002
-+    cycle_days: 150
-+    season_start: 90
-+    season_end: 240
-+    source: FAO Crop Calendar
-+  - name: Jute
-+    sci_name: Corchorus capsularis
-+    fao_code: 1003
-+    cycle_days: 150
-+    season_start: 95
-+    season_end: 245
-+    source: FAO Crop Calendar
-+  - name: Roselle
-+    sci_name: Hibiscus sabdariffa
-+    fao_code: 1004
-+    cycle_days: 150
-+    season_start: 95
-+    season_end: 245
-+    source: FAO Crop Calendar
-+  - name: Hemp
-+    sci_name: Cannabis sativa
-+    fao_code: 1005
-+    cycle_days: 120
-+    season_start: 90
-+    season_end: 220
-+    source: FAO Crop Calendar
-+  - name: Ramie
-+    sci_name: Boehmeria nivea
-+    fao_code: 1006
-+    cycle_days: 300
-+    season_start: 1
-+    season_end: 300
-+    source: FAO Crop Calendar
-+  - name: Sisal
-+    sci_name: Agave sisalana
-+    fao_code: 1007
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Abaca
-+    sci_name: Musa textilis
-+    fao_code: 1008
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Kapok
-+    sci_name: Ceiba pentandra
-+    fao_code: 1009
-+    cycle_days: 365
-+    season_start: 1
-+    season_end: 365
-+    source: FAO Crop Calendar
-+  - name: Broomcorn
-+    sci_name: Sorghum bicolor var. technicum
-+    fao_code: 1010
-+    cycle_days: 120
-+    season_start: 90
-+    season_end: 220
-+    source: FAO Crop Calendar
-diff --git a/data/austin_farmland/ndvi_anomaly_preview.png b/data/austin_farmland/ndvi_anomaly_preview.png
-deleted file mode 100644
-index 0c6050297f446382ed4724a27f86cc35167b531a..0000000000000000000000000000000000000000
-GIT binary patch
-literal 0
-HcmV?d00001
-
-literal 69514
-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
-
-diff --git a/docs/architecture_diagram.mmd b/docs/architecture_diagram.mmd
-new file mode 100644
-index 0000000000000000000000000000000000000000..90f10810cb96b73891178a3b19e605756aa55886
---- /dev/null
-+++ b/docs/architecture_diagram.mmd
-@@ -0,0 +1,12 @@
-+%% Situated Insight architecture diagram
-+flowchart TD
-+    A[Global Climate Datasets\nCHIRPS ¬∑ ERA5 ¬∑ MODIS ¬∑ SoilGrids] --> B[Regional Distillation Engine\nfetch_* scripts]
-+    A --> C[Context Libraries\nCrop calendars ¬∑ Phenology ¬∑ Practices]
-+    B --> D[Regional Cache\nCSV / Parquet]
-+    C --> D
-+    D --> E[Feature Builder\nTiered features]
-+    E --> F[Random Forest Models\nTiered metrics]
-+    D --> G[Anomaly + Insight Engine\nSPI ¬∑ NDVI ¬∑ Rules]
-+    F --> G
-+    G --> H[Insight Workspace\nregions/workspaces/<region>]
-+    G --> I[Green AI Logs\nCodeCarbon]
-diff --git a/docs/greenai_metrics.md b/docs/greenai_metrics.md
-index ea79b7b59c5a3e72dcf108ce875d3dc77f4c8929..cb20e164b5ee5fad4d7c34523e915e5cc9f4a80b 100644
---- a/docs/greenai_metrics.md
-+++ b/docs/greenai_metrics.md
-@@ -1,3 +1,25 @@
- # Green AI Metrics
- 
--We log runtime, data size, and CO2eq via CodeCarbon.
-\ No newline at end of file
-+The Hack4Earth challenge requires a **Scientific Carbon Impact (SCI)-style** comparison between a baseline and an optimised run for the same task.
-+
-+Minimum deliverables per region/run:
-+
-+1. `runtime_sec`
-+2. `energy_kwh` (or proxy)
-+3. `co2e_kg` with methodology note
-+4. Hardware descriptor (CPU model, cores) and geographic region
-+
-+### How to capture the metrics
-+
-+Wrap any command with the CodeCarbon helper:
-+
-+```bash
-+python engine/evaluate_greenai.py \
-+    --region hungary_transdanubia \
-+    --label baseline \
-+    --command "python scripts/train_region_model.py --region hungary_transdanubia --tier 1"
-+```
-+
-+This writes a JSON line under `models/<region>/greenai_runs.jsonl` with the required metrics and an execution log. Repeat with your optimised configuration (e.g., higher feature tier, tuned hyperparameters) and summarise the **before/after** in the submission notebook.
-+
-+For the carbon-aware bonus, record one of the runs during a lower-carbon window (e.g., UTC night for EU grids) or on Kaggle's `us-central1` CPU region and attach a screenshot/log of the scheduler time.
-\ No newline at end of file
-diff --git a/docs/regional_config_guide.md b/docs/regional_config_guide.md
-index 6f7314d26d2c874b7319e66aaeeb9a62a0bd77f7..a88dabab8eac3c2b36ec76b9adfba1ea24a803e7 100644
---- a/docs/regional_config_guide.md
-+++ b/docs/regional_config_guide.md
-@@ -1,7 +1,16 @@
- # Regional Config Guide
- 
--Each region has a `region.yml` with keys:
--- name
--- bbox: [lon_min, lat_min, lon_max, lat_max]
--- start_date, end_date
--- crop_context: [wheat, maize] or [coffee]
-+Each region now ships with an `insight.<region>.yml` file under `regions/profiles/` that **extends** `insight.defaults.yml`.
-+
-+Minimum keys to override:
-+
-+- `extends`: always `insight.defaults.yml` unless you build a custom base.
-+- `region_meta`
-+  - `name`
-+  - `country`
-+  - `bbox` ‚Üí `[lon_min, lat_min, lon_max, lat_max]`
-+  - `crops` ‚Üí values taken from `config/crop_library.yml`
-+- `baseline.start_year` / `baseline.end_year`
-+- `rules` ‚Üí optional rule-based insight triggers (see examples in `regions/profiles/insight.hungary_transdanubia.yml`).
-+
-+All other keys inherit from the defaults file. You can override window sizes or variable mappings when the regional context demands it (e.g., longer SPI windows for perennial crops).
-diff --git a/engine/evaluate_greenai.py b/engine/evaluate_greenai.py
-index 00e8a9a0d33e50f0813a9feb45b3d5e05cabe148..e28eee93c72c95b9e58823b9b3cfd5474d47f711 100644
---- a/engine/evaluate_greenai.py
-+++ b/engine/evaluate_greenai.py
-@@ -1,8 +1,138 @@
-+#!/usr/bin/env python3
-+"""Wrap any command with CodeCarbon to log Green-AI metrics.
-+
-+Example
-+-------
-+python engine/evaluate_greenai.py \
-+    --region hungary_transdanubia \
-+    --label baseline \
-+    --command "python scripts/train_region_model.py --region hungary_transdanubia --tier 1"
-+"""
-+
-+from __future__ import annotations
-+
-+import argparse
-+import json
-+import os
-+import platform
-+import subprocess
-+import sys
-+import time
-+from datetime import datetime, timezone
-+from pathlib import Path
-+from typing import Any, Dict
-+
- from codecarbon import EmissionsTracker
- 
--def measure(fn, *args, **kwargs):
--    tracker = EmissionsTracker()
-+ROOT = Path(__file__).resolve().parents[1]
-+SRC = ROOT / "src"
-+if SRC.exists() and str(SRC) not in sys.path:
-+    sys.path.insert(0, str(SRC))
-+
-+from regional_agent import ensure_region_workspace
-+
-+
-+def _default_hardware_metadata() -> Dict[str, Any]:
-+    return {
-+        "platform": platform.platform(),
-+        "processor": platform.processor() or os.environ.get("PROCESSOR_IDENTIFIER", ""),
-+        "python_version": sys.version.split()[0],
-+    }
-+
-+
-+def run_with_tracking(command: str, project_name: str | None = None) -> Dict[str, Any]:
-+    tracker = EmissionsTracker(
-+        project_name=project_name,
-+        save_to_file=False,
-+        measure_power_secs=1,
-+        log_level="error",
-+    )
-     tracker.start()
--    result = fn(*args, **kwargs)
--    emissions = tracker.stop()
--    return result, emissions
-+    started = time.time()
-+    returncode = 0
-+    emissions = 0.0
-+    elapsed = 0.0
-+    data: Dict[str, Any] = {}
-+    try:
-+        completed = subprocess.run(command, shell=True, check=True)
-+        returncode = completed.returncode
-+    except subprocess.CalledProcessError as exc:
-+        returncode = exc.returncode
-+        raise
-+    finally:
-+        emissions = tracker.stop() or 0.0
-+        elapsed = time.time() - started
-+        emissions_data = getattr(tracker, "final_emissions_data", None)
-+        if hasattr(emissions_data, "as_dict"):
-+            data = emissions_data.as_dict()
-+        else:
-+            data = {}
-+        data.setdefault("emissions_kg", emissions)
-+        data.setdefault("duration_sec", elapsed)
-+        data.setdefault("energy_consumed_kwh", data.get("energy_consumed"))
-+        data.setdefault("returncode", returncode)
-+
-+    record = {
-+        "runtime_sec": round(elapsed, 3),
-+        "co2e_kg": round(emissions or 0.0, 6),
-+        "energy_kwh": round((data.get("energy_consumed_kwh") or 0.0), 6),
-+        "raw": data,
-+        "returncode": returncode,
-+    }
-+    return record
-+
-+
-+def main() -> None:
-+    parser = argparse.ArgumentParser(description="Profile a command with CodeCarbon.")
-+    parser.add_argument("--region", required=True, help="Region key (e.g. hungary_transdanubia)")
-+    parser.add_argument("--label", default="baseline", help="Run label (baseline, optimized, etc.)")
-+    parser.add_argument(
-+        "--command",
-+        required=True,
-+        help="Command to execute; wrap in quotes if it has spaces",
-+    )
-+    parser.add_argument(
-+        "--output",
-+        help="Optional custom output path; defaults to models/<region>/greenai_runs.jsonl",
-+    )
-+    args = parser.parse_args()
-+
-+    project = f"{args.region}-{args.label}"
-+    timestamp = datetime.now(tz=timezone.utc).isoformat()
-+
-+    try:
-+        metrics = run_with_tracking(args.command, project_name=project)
-+    except subprocess.CalledProcessError as exc:
-+        metrics = {
-+            "runtime_sec": None,
-+            "co2e_kg": None,
-+            "energy_kwh": None,
-+            "raw": {"error": str(exc)},
-+            "returncode": exc.returncode,
-+        }
-+
-+    entry = {
-+        "timestamp": timestamp,
-+        "region": args.region,
-+        "label": args.label,
-+        "command": args.command,
-+        "hardware": _default_hardware_metadata(),
-+        **metrics,
-+    }
-+
-+    output_path = Path(args.output) if args.output else Path("models") / args.region / "greenai_runs.jsonl"
-+    output_path.parent.mkdir(parents=True, exist_ok=True)
-+    with output_path.open("a", encoding="utf-8") as fh:
-+        fh.write(json.dumps(entry) + "\n")
-+
-+    workspace = ensure_region_workspace(args.region)
-+    workspace_out = workspace / "logs" / output_path.name
-+    workspace_out.parent.mkdir(parents=True, exist_ok=True)
-+    with workspace_out.open("a", encoding="utf-8") as fh:
-+        fh.write(json.dumps(entry) + "\n")
-+
-+    print(json.dumps(entry, indent=2))
-+
-+
-+if __name__ == "__main__":
-+    main()
-diff --git a/models/hungary_farmland/tier1_model.pkl b/models/hungary_farmland/tier1_model.pkl
-deleted file mode 100644
-index c75c4ec5441ffc6d7681960633dcf9f838b1f3bf..0000000000000000000000000000000000000000
-diff --git a/notebooks/helper_snippets.ipynb b/notebooks/helper_snippets.ipynb
-deleted file mode 100644
-index de3bd6f6fe6d32c65dbed12f46f66e66d636c941..0000000000000000000000000000000000000000
---- a/notebooks/helper_snippets.ipynb
-+++ /dev/null
-@@ -1,9 +0,0 @@
--{
-- "cells": [
--  {"cell_type":"markdown","metadata":{},"source":["# Dev Notebook"]},
--  {"cell_type":"code","metadata":{},"source":["print('hello dev')"],"execution_count":null,"outputs":[]}
-- ],
-- "metadata": {"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},
-- "nbformat":4,
-- "nbformat_minor":5
--}
-diff --git a/notebooks/pipeline_demo.ipynb b/notebooks/pipeline_demo.ipynb
-new file mode 100644
-index 0000000000000000000000000000000000000000..e4a73676c4840f9c529a8c15b7a63f4280da7522
---- /dev/null
-+++ b/notebooks/pipeline_demo.ipynb
-@@ -0,0 +1,80 @@
-+{
-+ "cells": [
-+  {
-+   "cell_type": "markdown",
-+   "metadata": {},
-+   "source": [
-+    "# Regional Pipeline Demo\n",
-+    "\n",
-+    "Use this notebook to reproduce the CPU-only pipeline for either flagship region:\n",
-+    "\n",
-+    "- `hungary_transdanubia` (winter wheat rotation)\n",
-+    "- `jamaica_coffee` (Blue Mountain coffee belt)\n",
-+    "\n",
-+    "Each block mirrors the CLI steps described in the README. Run the notebook twice\u2014once for a baseline tier, once for an optimised tier\u2014and record the CodeCarbon outputs for the hackathon submission."
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": null,
-+   "metadata": {},
-+   "outputs": [],
-+   "source": [
-+    "import subprocess\n",
-+    "from pathlib import Path\n\n",
-+    "REGION = 'hungary_transdanubia'  # or 'jamaica_coffee'\n",
-+    "DATA_DIR = Path('data') / REGION\n",
-+    "CONFIG_PATH = Path('config') / f'insight.{REGION}.yml'\n",
-+    "assert CONFIG_PATH.exists(), f'Missing config for {REGION}'\n",
-+    "DATA_DIR.mkdir(parents=True, exist_ok=True)\n",
-+    "CONFIG_PATH"
-+   ]
-+  },
-+  {
-+   "cell_type": "code",
-+   "execution_count": null,
-+   "metadata": {},
-+   "outputs": [],
-+   "source": [
-+    "def run(cmd):\n",
-+    "    if isinstance(cmd, (list, tuple)):\n",
-+    "        display_cmd = ' '.join(cmd)\n",
-+    "    else:\n",
-+    "        display_cmd = cmd\n",
-+    "    print('\u21aa', display_cmd)\n",
-+    "    result = subprocess.run(cmd, check=True, text=True, capture_output=True)\n",
-+    "    print(result.stdout)\n",
-+    "    if result.stderr:\n",
-+    "        print(result.stderr)\n",
-+    "\n",
-+    "run(['python', 'scripts/build_region_cache.py', '--region', REGION])\n",
-+    "run(['python', 'scripts/build_region_insights.py', '--region', REGION])\n",
-+    "run(['python', 'scripts/train_region_model.py', '--region', REGION, '--tier', '2', '--freq', 'monthly'])\n",
-+    "run(['python', 'engine/evaluate_greenai.py', '--region', REGION, '--label', 'baseline', '--command', f'python scripts/train_region_model.py --region {REGION} --tier 1 --freq monthly'])\n",
-+    "run(['python', 'engine/evaluate_greenai.py', '--region', REGION, '--label', 'optimised', '--command', f'python scripts/train_region_model.py --region {REGION} --tier 3 --freq monthly'])\n",
-+    "run(['python', 'scripts/flag_anomalies.py', '--region', REGION, '--config', str(CONFIG_PATH)])"
-+   ]
-+  }
-+ ],
-+ "metadata": {
-+  "kernelspec": {
-+   "display_name": "Python 3",
-+   "language": "python",
-+   "name": "python3"
-+  },
-+  "language_info": {
-+   "codemirror_mode": {
-+    "name": "ipython",
-+    "version": 3
-+   },
-+   "file_extension": ".py",
-+   "mimetype": "text/x-python",
-+   "name": "python",
-+   "nbconvert_exporter": "python",
-+   "pygments_lexer": "ipython3",
-+   "version": "3.11"
-+  }
-+ },
-+ "nbformat": 4,
-+ "nbformat_minor": 5
-+}
-\ No newline at end of file
-diff --git a/notebooks/regional_agent_dev.ipynb b/notebooks/regional_agent_dev.ipynb
-deleted file mode 100644
-index de3bd6f6fe6d32c65dbed12f46f66e66d636c941..0000000000000000000000000000000000000000
---- a/notebooks/regional_agent_dev.ipynb
-+++ /dev/null
-@@ -1,9 +0,0 @@
--{
-- "cells": [
--  {"cell_type":"markdown","metadata":{},"source":["# Dev Notebook"]},
--  {"cell_type":"code","metadata":{},"source":["print('hello dev')"],"execution_count":null,"outputs":[]}
-- ],
-- "metadata": {"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},
-- "nbformat":4,
-- "nbformat_minor":5
--}
-diff --git a/notebooks/regional_agent_kaggle.ipynb b/notebooks/regional_agent_kaggle.ipynb
-deleted file mode 100644
-index f49a28ef86046f6f30309ebbeb1dd1e38dca4d25..0000000000000000000000000000000000000000
---- a/notebooks/regional_agent_kaggle.ipynb
-+++ /dev/null
-@@ -1,36 +0,0 @@
--{
-- "cells": [
--  {
--   "cell_type": "markdown",
--   "metadata": {},
--   "source": [
--    "# Regional Agent (CPU-only) ‚Äî Kaggle Notebook\n",
--    "Loads cached data from attached dataset and produces rec_cards.json."
--   ]
--  },
--  {
--   "cell_type": "code",
--   "execution_count": null,
--   "metadata": {},
--   "outputs": [],
--   "source": [
--    "import pandas as pd, json, os, pathlib\n",
--    "DATA = pathlib.Path('/kaggle/input') / 'regional-agent-hack' / 'data'\n",
--    "regions = ['hungary_farmland','jamaica_coffee']\n",
--    "outs = pathlib.Path('outputs/insights'); outs.mkdir(parents=True, exist_ok=True)\n",
--    "for r in regions:\n",
--    "    p = DATA / r / 'chirps_cached.csv'\n",
--    "    df = pd.read_csv(p)\n",
--    "    recs = [{"date": d, "rec": "placeholder", "rationale": "demo"} for d in df['date'].head(3)]\n",
--    "    with open(outs / f"{r}_rec_cards.json", 'w') as f:\n",
--    "        json.dump(recs, f, indent=2)\n",
--    "print('Done; see outputs/insights/*.json')"
--   ]
--  }
-- ],
-- "metadata": {
--  "kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}
-- },
-- "nbformat": 4,
-- "nbformat_minor": 5
--}
-diff --git a/notebooks/regional_agent_training.ipynb b/notebooks/regional_agent_training.ipynb
-deleted file mode 100644
-index de3bd6f6fe6d32c65dbed12f46f66e66d636c941..0000000000000000000000000000000000000000
---- a/notebooks/regional_agent_training.ipynb
-+++ /dev/null
-@@ -1,9 +0,0 @@
--{
-- "cells": [
--  {"cell_type":"markdown","metadata":{},"source":["# Dev Notebook"]},
--  {"cell_type":"code","metadata":{},"source":["print('hello dev')"],"execution_count":null,"outputs":[]}
-- ],
-- "metadata": {"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"}},
-- "nbformat":4,
-- "nbformat_minor":5
--}
-diff --git a/pyproject.toml b/pyproject.toml
-index 638dd9c54fcbd5b70ee15947e45dc1a58dbfa458..548afbce0ce470a3b1368f81de2a77d6719ec97b 100644
---- a/pyproject.toml
-+++ b/pyproject.toml
-@@ -1,3 +1,14 @@
- [build-system]
- requires = ["setuptools>=61.0"]
- build-backend = "setuptools.build_meta"
-+
-+[project]
-+name = "situated-insight"
-+version = "0.1.0"
-+description = "Regional climate insight agent template"
-+authors = [{ name = "Morgan Urich" }]
-+requires-python = ">=3.11"
-+dependencies = []
-+
-+[tool.setuptools.packages.find]
-+where = ["src"]
-diff --git a/regions/README.md b/regions/README.md
-new file mode 100644
-index 0000000000000000000000000000000000000000..53c748f3d7f10416fc33f03501fc20b44f7f412f
---- /dev/null
-+++ b/regions/README.md
-@@ -0,0 +1,12 @@
-+# Region Workspaces
-+
-+This folder separates reusable package code from the sample regions that ship with the template.
-+
-+- `profiles/` holds `insight.<region>.yml` descriptors used by the setup wizard and the automation pipeline.
-+- `workspaces/` is where new areas of interest are scaffolded when you run the onboarding CLI. Each workspace
-+  mirrors the structure under `data/<region>/` and stores intermediate caches, plots, anomaly flags, and
-+  trained models.
-+
-+The CLI and helper scripts load profiles directly from `regions/profiles/`, while the `regional_agent`
-+package mirrors outputs into `regions/workspaces/<region>/` so analysts have a clean, dedicated sandbox
-+after the automated pipeline finishes.
-diff --git a/config/insight.austin_farmland.yml b/regions/profiles/insight.austin_farmland.yml
-similarity index 98%
-rename from config/insight.austin_farmland.yml
-rename to regions/profiles/insight.austin_farmland.yml
-index d7de71614b589e11600e68eee3bc66788d8d5b2f..d99ed6b48f98567d25bdba608161483cb7b6f7da 100644
---- a/config/insight.austin_farmland.yml
-+++ b/regions/profiles/insight.austin_farmland.yml
-@@ -1,29 +1,29 @@
- baseline:
-   end_year: 2022
-   start_year: 2010
--extends: config/insight.defaults.yml
-+extends: insight.defaults.yml
- outputs:
-   daily: true
-   include_climatology: true
-   include_rolling: true
-   monthly: true
- region_meta:
-   bbox:
-   - -97.708351
-   - 30.16754
-   - -97.447254
-   - 30.28264
-   country: United States
-   crops:
-   - soybean
-   - vegetables
-   notes: "placeholder \u2014 auto-filled by user or agent"
- rolling:
-   min_periods: 5
-   window_days: 30
- rules:
- - id: au_irrigation_recovery
-   label: 'AUSTIN_FARMLAND: Possible irrigation recovery event'
-   note: "NDVI and soil moisture increase without rainfall \u2192 possible irrigation\
-     \ response."
-   when:
-diff --git a/regions/profiles/insight.defaults.yml b/regions/profiles/insight.defaults.yml
-new file mode 100644
-index 0000000000000000000000000000000000000000..ea937890691ac1846ed9d1b574ec5a44d80d0b2c
---- /dev/null
-+++ b/regions/profiles/insight.defaults.yml
-@@ -0,0 +1,37 @@
-+# Default insight configuration shared across regions.
-+# Regions extend this file and override keys as needed.
-+baseline:
-+  start_year: 2015
-+  end_year: 2023
-+outputs:
-+  daily: true
-+  monthly: true
-+  include_climatology: true
-+  include_rolling: true
-+region_meta:
-+  name: "UNSET"
-+  country: "UNSET"
-+  bbox: []
-+  crops: []
-+  phenology_library: config/phenology/
-+rolling:
-+  window_days: 30
-+  min_periods: 5
-+windows:
-+  spi_short: 30
-+  spi_long: 90
-+  plot_context_days: 60
-+variables:
-+  precipitation:
-+    column: precip_mm_sum
-+    enabled: true
-+  temperature:
-+    column: t2m_mean
-+    enabled: true
-+  soil_moisture:
-+    column: soil_surface_moisture
-+    enabled: true
-+  vegetation:
-+    column: ndvi
-+    enabled: true
-+rules: []
-diff --git a/regions/profiles/insight.hungary_transdanubia.yml b/regions/profiles/insight.hungary_transdanubia.yml
-new file mode 100644
-index 0000000000000000000000000000000000000000..23fbabe435daf3c37e3e16627c2efe10ae85da04
---- /dev/null
-+++ b/regions/profiles/insight.hungary_transdanubia.yml
-@@ -0,0 +1,41 @@
-+extends: insight.defaults.yml
-+region_meta:
-+  name: Transdanubia Wheat Belt
-+  country: Hungary
-+  bbox:
-+    - 16.65
-+    - 46.70
-+    - 18.30
-+    - 47.45
-+  crops:
-+    - Wheat
-+    - Maize
-+  notes: "Winter wheat rotation in Transdanubia; bounding box covers Gy≈ër-Moson-Sopron to Tolna"
-+baseline:
-+  start_year: 2012
-+  end_year: 2023
-+rules:
-+  - id: hu_heat_stress
-+    label: 'Transdanubia: Wheat canopy heat stress'
-+    when:
-+      all:
-+        - var: t2m_mean_anomaly_roll
-+          op: '>'
-+          value: 2.5
-+        - var: ndvi_zscore
-+          op: '<'
-+          value: -0.5
-+  - id: hu_water_deficit
-+    label: 'Transdanubia: Soil water deficit alert'
-+    when:
-+      all:
-+        - var: precip_mm_sum_anomaly_roll
-+          op: '<'
-+          value: -0.6
-+        - var: soil_surface_moisture
-+          op: '<'
-+          value: 0.18
-+windows:
-+  spi_short: 30
-+  spi_long: 90
-+  plot_context_days: 75
-diff --git a/regions/profiles/insight.jamaica_coffee.yml b/regions/profiles/insight.jamaica_coffee.yml
-new file mode 100644
-index 0000000000000000000000000000000000000000..24d419fa8b7dfa7a6e777decb48a64802c327dce
---- /dev/null
-+++ b/regions/profiles/insight.jamaica_coffee.yml
-@@ -0,0 +1,40 @@
-+extends: insight.defaults.yml
-+region_meta:
-+  name: Jamaica Blue Mountain Coffee Belt
-+  country: Jamaica
-+  bbox:
-+    - -76.85
-+    - 17.90
-+    - -76.40
-+    - 18.30
-+  crops:
-+    - Coffee
-+  notes: "Arabica coffee estates across the Blue and John Crow Mountains"
-+baseline:
-+  start_year: 2015
-+  end_year: 2023
-+rules:
-+  - id: jm_cool_spell
-+    label: 'Blue Mountain: Cool spell impacting flowering'
-+    when:
-+      all:
-+        - var: t2m_min
-+          op: '<'
-+          value: 15.0
-+        - var: precip_mm_sum_anomaly_roll
-+          op: '>'
-+          value: 0.4
-+  - id: jm_dry_stress
-+    label: 'Blue Mountain: Dry season stress on coffee'
-+    when:
-+      all:
-+        - var: precip_mm_sum_anomaly_clim
-+          op: '<'
-+          value: -0.7
-+        - var: ndvi_zscore
-+          op: '<'
-+          value: -0.6
-+windows:
-+  spi_short: 45
-+  spi_long: 120
-+  plot_context_days: 90
-diff --git a/docs/architecture_diagram.png b/regions/workspaces/.gitkeep
-similarity index 100%
-rename from docs/architecture_diagram.png
-rename to regions/workspaces/.gitkeep
-diff --git a/requirements.txt b/requirements.txt
-index b8ca68e869dcc8ffd2ed0d96e68120ea787d660f..8ca1b267e7b4ca7941b58eb7f0a20ab3869647a0 100644
-GIT binary patch
-literal 3562
-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
-akTe51Ma0bMrUG6^kr~M+V8`UMBL4z>Fh_d;
-
-literal 7468
-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
-
-diff --git a/scripts/__pycache__/build_context_layers.cpython-313.pyc b/scripts/__pycache__/build_context_layers.cpython-313.pyc
-deleted file mode 100644
-index 53d54d94f21435069928d2e6985532fe95bb16c9..0000000000000000000000000000000000000000
-GIT binary patch
-literal 0
-HcmV?d00001
-
-literal 15358
-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
-Q?KThUjXz?{gH^`=3%0F*dH?_b
-
-diff --git a/scripts/__pycache__/build_region_cache.cpython-313.pyc b/scripts/__pycache__/build_region_cache.cpython-313.pyc
-deleted file mode 100644
-index b71302d4d064876636fe12c34c3bd09c94a86305..0000000000000000000000000000000000000000
-GIT binary patch
-literal 0
-HcmV?d00001
-
-literal 10290
-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
-Z61)Id`(xvfS@XWRbZDRM{dxkP{|hgkLU{lH
-
-diff --git a/scripts/__pycache__/build_region_insights.cpython-313.pyc b/scripts/__pycache__/build_region_insights.cpython-313.pyc
-deleted file mode 100644
-index ee97db4d37b1bee1a5a8eeb2a2613dc51956f72b..0000000000000000000000000000000000000000
-GIT binary patch
-literal 0
-HcmV?d00001
-
-literal 11888
-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
-
-diff --git a/scripts/__pycache__/gee_setup.cpython-313.pyc b/scripts/__pycache__/gee_setup.cpython-313.pyc
-deleted file mode 100644
-index 2357fb9a6684772c887fbf96a9095b7fc17314ad..0000000000000000000000000000000000000000
-GIT binary patch
-literal 0
-HcmV?d00001
-
-literal 5416
-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
-
-diff --git a/scripts/__pycache__/init_region.cpython-313.pyc b/scripts/__pycache__/init_region.cpython-313.pyc
-deleted file mode 100644
-index 9b95f4efd7e76bbbcab9c185cb2cb46a0b3a6dc8..0000000000000000000000000000000000000000
-GIT binary patch
-literal 0
-HcmV?d00001
-
-literal 7709
-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
-Na-q-uxYq)|{|Bv!mQDZw
-
-diff --git a/scripts/_shared.py b/scripts/_shared.py
-new file mode 100644
-index 0000000000000000000000000000000000000000..a43621de7acf0dce913c6765411e96bd06d8202e
---- /dev/null
-+++ b/scripts/_shared.py
-@@ -0,0 +1,23 @@
-+"""Shared helpers for script entrypoints to access the packaged utilities."""
-+from __future__ import annotations
-+
-+import sys
-+from pathlib import Path
-+
-+ROOT = Path(__file__).resolve().parents[1]
-+SRC = ROOT / "src"
-+if SRC.exists() and str(SRC) not in sys.path:
-+    sys.path.insert(0, str(SRC))
-+
-+from regional_agent.config import (  # noqa: E402
-+    resolve_region_config_path,
-+    load_region_profile,
-+    ensure_region_workspace,
-+)
-+
-+__all__ = [
-+    "ROOT",
-+    "resolve_region_config_path",
-+    "load_region_profile",
-+    "ensure_region_workspace",
-+]
-diff --git a/scripts/agent/features/__pycache__/builder.cpython-313.pyc b/scripts/agent/features/__pycache__/builder.cpython-313.pyc
-deleted file mode 100644
-index f4db6e9a00f128a306bdb7e3d293cb9bc9f7dd25..0000000000000000000000000000000000000000
-GIT binary patch
-literal 0
-HcmV?d00001
-
-literal 7131
-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
-
-diff --git a/scripts/agent/features/builder.py b/scripts/agent/features/builder.py
-index ba56c3b26a5c16e88d6623be83ae5cac68046e16..cfd4b866d129727257eea147de6a3b22040c1ff7 100644
---- a/scripts/agent/features/builder.py
-+++ b/scripts/agent/features/builder.py
-@@ -97,50 +97,79 @@ def add_practice_features(df: pd.DataFrame, region_path: Path):
- # ------------------------------------------------------------
- def add_context_features(df: pd.DataFrame, region_path: Path):
-     # Merge RAG metadata if available
-     rag_file = region_path / "rags.csv"
-     if rag_file.exists():
-         rags = pd.read_csv(rag_file)
-         df = df.merge(rags, how="left", on="rag_id", validate="m:1")
- 
-     # Merge any files under context_layers/
-     context_dir = region_path / "context_layers"
-     if context_dir.exists():
-         for file in context_dir.glob("*.csv"):
-             ctx = pd.read_csv(file)
-             df = df.merge(ctx, how="left", on="rag_id", suffixes=("", f"_{file.stem}"))
- 
-     # One-hot encode soil_type etc. if present
-     cat_cols = [c for c in df.columns if c in ["soil_type", "elevation_band"]]
-     if cat_cols:
-         df = pd.get_dummies(df, columns=cat_cols)
-     return df
- 
- 
- # ------------------------------------------------------------
- # Main builder function
- # ------------------------------------------------------------
--def build_features(region: str, tier: int = 1):
-+def build_features(region: str, tier: int = 1, insight_file: Path | str | None = None,
-+                   target: str | None = None):
-+    """Assemble feature matrix/target vector for a region.
-+
-+    Parameters
-+    ----------
-+    region: str
-+        Region key matching ``data/<region>``.
-+    tier: int
-+        Feature tier depth (1=core, 2=+phenology/practices, 3=+context).
-+    insight_file: Optional path
-+        Explicit insight CSV override. Defaults to ``insights_monthly.csv``.
-+    target: Optional[str]
-+        Name of the target column. Falls back to ``ndvi_anomaly`` or
-+        ``ndvi_zscore`` if present.
-+    """
-+
-     region_path = Path("data") / region
--    insight_file = region_path / "insight_monthly.csv"
--    if not insight_file.exists():
--        raise FileNotFoundError(f"No insight_monthly.csv for region {region}")
-+    if insight_file is None:
-+        insight_file = region_path / "insights_monthly.csv"
-+        if not insight_file.exists():
-+            # Backwards compatibility with older naming convention
-+            legacy = region_path / "insight_monthly.csv"
-+            if legacy.exists():
-+                insight_file = legacy
-+            else:
-+                raise FileNotFoundError(
-+                    f"No insights file found for region {region} (looked for {insight_file})"
-+                )
-+    insight_file = Path(insight_file)
- 
-     df = pd.read_csv(insight_file, parse_dates=["date"])
-     df = add_tier1_features(df)
- 
-     if tier >= 2:
-         df = add_phenology_features(df, region_path)
-         df = add_practice_features(df, region_path)
- 
-     if tier >= 3:
-         df = add_context_features(df, region_path)
- 
-     # Define target (example: NDVI anomaly)
--    target_col = "ndvi_anomaly" if "ndvi_anomaly" in df.columns else None
-+    candidate_targets = [t for t in [target, "ndvi_anomaly", "ndvi_zscore"] if t]
-+    target_col = next((t for t in candidate_targets if t in df.columns), None)
-+
-     if target_col:
--        y = df[target_col].shift(-1).dropna()  # predict next period
-+        y = df[target_col].shift(-1).dropna()
-         X = df.iloc[:-1].drop(columns=["date", target_col])
-+        X = X.reset_index(drop=True)
-+        y = y.reset_index(drop=True)
-     else:
--        X, y = df.drop(columns=["date"]), None
-+        X, y = df.drop(columns=["date"]).reset_index(drop=True), None
- 
-     return X, y
-diff --git a/scripts/build_context_layers.py b/scripts/build_context_layers.py
-index dc441ad48de00d239e15aec73e97f5e20c1b74bc..72b3df25d81a97fe94abc4488d61bd28a540cfb0 100644
---- a/scripts/build_context_layers.py
-+++ b/scripts/build_context_layers.py
-@@ -1,57 +1,59 @@
- #!/usr/bin/env python3
- """
- Build static context layers for a given region.
- 
- Reads from:
--  config/insight.<region>.yml ‚Üí to get bbox + crop list
-+  regions/profiles/insight.<region>.yml ‚Üí to get bbox + crop list
- 
- Fetches:
-   - üåæ Crop phenology (via Open-Meteo temperature/GDD)
-   - ü™± Soil properties (SoilGrids v2.0)
-   - üèîÔ∏è Elevation (Open-Elevation API)
-   - üîÅ Dynamic layers via scripts/fetch_all.py (CHIRPS, NDVI, SMAP, OpenMeteo)
- 
- Outputs:
-   data/<region>/context_layers/
-     soil.csv, soil_metadata.json
-     topography.csv, topography_metadata.json
-     phenology_<crop>.csv, phenology_<crop>_metadata.json
- """
- 
- import argparse
- import json
- from datetime import datetime, timezone
- from pathlib import Path
- from subprocess import run
- import sys
- 
- import numpy as np
- import pandas as pd
- import requests
- import yaml
- 
-+from _shared import load_region_profile, resolve_region_config_path
-+
- 
- # -------------------------------------------------------
- # üåæ Phenology Helper (Open-Meteo ‚Üí GDD)
- # -------------------------------------------------------
- def fetch_openmeteo_phenology(lat: float, lon: float, crop: str, out_dir: Path) -> pd.DataFrame:
-     """
-     Derive simple phenology proxy from Open-Meteo ERA5 reanalysis.
-     Uses temperature-based GDD accumulation to estimate planting,
-     flowering, and harvest DOY thresholds.
-     """
- 
-     url = "https://archive-api.open-meteo.com/v1/era5"
-     params = {
-         "latitude": lat,
-         "longitude": lon,
-         "start_date": "2010-01-01",
-         "end_date": datetime.now().strftime("%Y-%m-%d"),
-         "daily": ["temperature_2m_max", "temperature_2m_min"],
-         "timezone": "auto",
-     }
- 
-     meta = {
-         "timestamp": datetime.now(timezone.utc).isoformat(),
-         "lat": lat,
-         "lon": lon,
-@@ -218,91 +220,86 @@ def fetch_elevation(lat: float, lon: float, out_dir: Path) -> pd.DataFrame:
-     try:
-         r = requests.post(url, json={"locations": [{"latitude": lat, "longitude": lon}]}, timeout=30)
-         r.raise_for_status()
-         elev = r.json()["results"][0]["elevation"]
-         df = pd.DataFrame([{"elevation_m": elev, "data_source": "Open_Elevation_API"}])
-         meta["source"] = "Open_Elevation_API"
-     except Exception as e:
-         print(f"‚ö†Ô∏è Elevation fallback: {e}")
-         df = pd.DataFrame([{"elevation_m": np.nan, "data_source": "Fallback_None"}])
-         meta["source"] = "Fallback_None"
- 
-     out_dir.mkdir(parents=True, exist_ok=True)
-     out_csv = out_dir / "topography.csv"
-     df.to_csv(out_csv, index=False)
-     with open(out_dir / "topography_metadata.json", "w") as f:
-         json.dump(meta, f, indent=2)
-     print(f"‚úÖ Saved {out_csv.name} ({len(df)} rows, source={meta['source']})")
-     return df
- 
- 
- # -------------------------------------------------------
- # üß© Context Layer Builder
- # -------------------------------------------------------
- def build_context_layers(region_name: str):
-     root = Path(__file__).resolve().parents[1]
--    cfg_path = root / "config" / f"insight.{region_name}.yml"
-+    cfg_path = resolve_region_config_path(region_name)
-     region_dir = root / "data" / region_name
-     ctx_dir = region_dir / "context_layers"
-     ctx_dir.mkdir(parents=True, exist_ok=True)
- 
--    if not cfg_path.exists():
--        print(f"‚ùå Config not found: {cfg_path}")
--        return
--
--    cfg = yaml.safe_load(open(cfg_path))
-+    cfg = load_region_profile(region_name)
-     bbox = cfg.get("region_meta", {}).get("bbox", [None, None, None, None])
-     crops = cfg.get("region_meta", {}).get("crops", ["generic_crop"])
- 
-     if not bbox or len(bbox) != 4 or any(v is None for v in bbox):
-         print("‚ö†Ô∏è Invalid or missing bbox; using (0,0).")
-         lat, lon = 0.0, 0.0
-     else:
-         lat = float(np.mean([bbox[1], bbox[3]]))
-         lon = float(np.mean([bbox[0], bbox[2]]))
- 
-     print(f"üåç Building context layers for {region_name}")
-     print(f"üìç Approx centroid: lat={lat:.3f}, lon={lon:.3f}")
-     print(f"üåæ Crops: {', '.join(crops)}")
- 
-     print("ü™± Fetching SoilGrids data...")
-     fetch_soilgrids(lat, lon, ctx_dir / "soil.csv")
- 
-     print("üèîÔ∏è Fetching elevation data...")
-     fetch_elevation(lat, lon, ctx_dir)
- 
-     for crop in crops:
-         print(f"üåæ Fetching phenology for {crop}...")
-         fetch_openmeteo_phenology(lat, lon, crop, ctx_dir)
- 
-     # üîÅ Run dynamic fetchers
-     fetch_all = root / "scripts" / "fetch_all.py"
-     if fetch_all.exists():
-         print("üîÅ Running fetch_all.py for dynamic datasets...")
-         run([sys.executable, str(fetch_all), "--region", region_name, "--mode", "active"], check=False)
- 
-     cache_builder = root / "scripts" / "build_region_cache.py"
-     if cache_builder.exists():
-         print("üì¶ Building full regional cache...")
-         run([sys.executable, str(cache_builder), "--region", region_name], check=False)
- 
-     print(f"üéâ Context layers built successfully for {region_name}")
- 
- 
- # -------------------------------------------------------
- # Entrypoint
- # -------------------------------------------------------
- if __name__ == "__main__":
-     parser = argparse.ArgumentParser(description="Build static context layers for a region.")
-     parser.add_argument("--region", required=True, help="Region name (e.g. hungary_farmland)")
-     parser.add_argument("--crop", nargs="+", help="Optional crop list to override YAML (e.g. --crop maize wheat)")
-     args = parser.parse_args()
- 
-     if args.crop:
--        cfg_path = Path(__file__).resolve().parents[1] / "config" / f"insight.{args.region}.yml"
--        if cfg_path.exists():
--            cfg = yaml.safe_load(open(cfg_path))
--            cfg.setdefault("region_meta", {})["crops"] = args.crop
--            yaml.safe_dump(cfg, open(cfg_path, "w"), sort_keys=False)
--            print(f"üåæ Overrode crops in config ‚Üí {args.crop}")
-+        cfg_path = resolve_region_config_path(args.region)
-+        cfg = yaml.safe_load(open(cfg_path))
-+        cfg.setdefault("region_meta", {})["crops"] = args.crop
-+        yaml.safe_dump(cfg, open(cfg_path, "w"), sort_keys=False)
-+        print(f"üåæ Overrode crops in profile ‚Üí {args.crop}")
- 
-     build_context_layers(args.region)
-diff --git a/scripts/build_rag_context.py b/scripts/build_rag_context.py
-index a6be117c4fd336680ed07f76aefd88ba23d62cf2..d585f57f6f1f945a0b8e3b934c342fa1a8e63b3a 100644
---- a/scripts/build_rag_context.py
-+++ b/scripts/build_rag_context.py
-@@ -1,174 +1,128 @@
- #!/usr/bin/env python3
- """
- Build RAG (Regional Aggregation Grid) context layers for a region.
- 
- Reads:
--  - config/insight.<region>.yml  (to get bbox, crops, and metadata)
-+  - regions/profiles/insight.<region>.yml  (to get bbox, crops, and metadata)
-   - data/<region>/ (for caching)
- 
- Creates:
-   - data/<region>/context_layers/phenology.csv
-   - data/<region>/context_layers/soil.csv
-   - data/<region>/context_layers/topography.csv
-   - data/<region>/rags.csv (summary)
- 
- Each layer is lightweight and cached ‚Äî ready for use in feature building.
- """
- 
- import argparse
- import pandas as pd
--import numpy as np
--import yaml
--import requests
-+import shutil
- from pathlib import Path
- from datetime import datetime
- 
-+from _shared import ensure_region_workspace, load_region_profile
-+
- ROOT = Path(__file__).resolve().parents[1]
- DATA_DIR = ROOT / "data"
--CONFIG_DIR = ROOT / "config"
- 
-+try:
-+    from scripts.build_context_layers import build_context_layers
-+except ModuleNotFoundError:
-+    from build_context_layers import build_context_layers
- 
--# -------------------------------------------------
--# Helpers
--# -------------------------------------------------
- 
- def load_region_meta(region):
--    cfg_path = CONFIG_DIR / f"insight.{region}.yml"
--    if not cfg_path.exists():
--        raise FileNotFoundError(f"No YAML config found for region {region}")
--    with open(cfg_path, "r") as f:
--        cfg = yaml.safe_load(f)
-+    cfg = load_region_profile(region)
-     return cfg.get("region_meta", {})
- 
- 
--def save_layer(region, name, df):
--    out_dir = DATA_DIR / region / "context_layers"
--    out_dir.mkdir(parents=True, exist_ok=True)
--    out_path = out_dir / f"{name}.csv"
--    df.to_csv(out_path, index=False)
--    print(f"‚úÖ Saved {name} ‚Üí {out_path.name} ({len(df)} rows)")
--    return out_path
-+def ensure_context_layers(region: str) -> Path:
-+    """Guarantee that context layer CSVs exist for the requested region."""
-+    ctx_dir = DATA_DIR / region / "context_layers"
-+    if not ctx_dir.exists() or not any(ctx_dir.glob("*.csv")):
-+        print("‚ÑπÔ∏è  No cached context layers detected ‚Äî building them now.")
-+        build_context_layers(region)
-+    return ctx_dir
- 
- 
--# -------------------------------------------------
--# 1Ô∏è‚É£ Phenology Layer ‚Äî from NASA POWER or CropCalendar
--# -------------------------------------------------
--def fetch_phenology(region_meta):
--    crops = region_meta.get("crops", ["unknown"])
--    bbox = region_meta.get("bbox")
--    if bbox and None not in bbox:
--        min_lon, min_lat, max_lon, max_lat = bbox
--    else:
--        print("‚ö†Ô∏è  Missing bbox; using placeholder coordinates for phenology.")
--        min_lon, min_lat, max_lon, max_lat = -77.0, 18.0, -76.5, 18.5
--
--    # Placeholder logic ‚Äî later can query NASA POWER CropCalendar API
--    data = []
--    for crop in crops:
--        data.append({
--            "crop": crop,
--            "planting_month": np.random.choice(range(1, 13)),
--            "harvest_month": np.random.choice(range(1, 13)),
--            "source": "placeholder",
--            "lat_center": (min_lat + max_lat) / 2,
--            "lon_center": (min_lon + max_lon) / 2
--        })
--    return pd.DataFrame(data)
-+def collect_layers(region: str) -> dict[str, pd.DataFrame]:
-+    ctx_dir = ensure_context_layers(region)
-+    layers: dict[str, pd.DataFrame] = {}
- 
-+    phenology_frames = []
-+    for path in ctx_dir.glob("phenology_*.csv"):
-+        try:
-+            df = pd.read_csv(path)
-+            df["source_file"] = path.name
-+            phenology_frames.append(df)
-+        except Exception as exc:
-+            print(f"‚ö†Ô∏è  Could not read {path}: {exc}")
-+    if phenology_frames:
-+        layers["phenology"] = pd.concat(phenology_frames, ignore_index=True)
- 
--# -------------------------------------------------
--# 2Ô∏è‚É£ Soil Structure Layer ‚Äî from SoilGrids or OpenLandMap
--# -------------------------------------------------
--def fetch_soil(region_meta):
--    bbox = region_meta.get("bbox")
--    if bbox and None not in bbox:
--        min_lon, min_lat, max_lon, max_lat = bbox
--    else:
--        print("‚ö†Ô∏è  Missing bbox; using placeholder coordinates for soil layer.")
--        min_lon, min_lat, max_lon, max_lat = -77.0, 18.0, -76.5, 18.5
--
--    # Placeholder synthetic soil values
--    soil_props = [
--        {"var": "sand", "mean_pct": np.random.uniform(30, 60)},
--        {"var": "clay", "mean_pct": np.random.uniform(10, 40)},
--        {"var": "organic_carbon", "g_kg": np.random.uniform(5, 20)},
--    ]
--    return pd.DataFrame(soil_props)
-+    soil_path = ctx_dir / "soil.csv"
-+    if soil_path.exists():
-+        layers["soil"] = pd.read_csv(soil_path)
- 
-+    topo_path = ctx_dir / "topography.csv"
-+    if topo_path.exists():
-+        layers["topography"] = pd.read_csv(topo_path)
- 
--# -------------------------------------------------
--# 3Ô∏è‚É£ Topography Layer ‚Äî from SRTM / OpenTopography
--# -------------------------------------------------
--def fetch_topography(region_meta):
--    bbox = region_meta.get("bbox")
--    if bbox and None not in bbox:
--        min_lon, min_lat, max_lon, max_lat = bbox
--    else:
--        print("‚ö†Ô∏è  Missing bbox; using placeholder coordinates for topography.")
--        min_lon, min_lat, max_lon, max_lat = -77.0, 18.0, -76.5, 18.5
--
--    # Placeholder values; later fetch via API
--    elev_mean = np.random.uniform(100, 1200)
--    slope_mean = np.random.uniform(2, 25)
--    aspect = np.random.choice(["N", "NE", "E", "SE", "S", "SW", "W", "NW"])
--    df = pd.DataFrame([{"elevation_m": elev_mean, "slope_deg": slope_mean, "dominant_aspect": aspect}])
--    return df
-+    return layers
- 
- 
--# -------------------------------------------------
--# 4Ô∏è‚É£ Summarize into rags.csv
--# -------------------------------------------------
--def build_rags_summary(region):
--    context_dir = DATA_DIR / region / "context_layers"
-+def build_rags_summary(region: str, layers: dict[str, pd.DataFrame]) -> pd.DataFrame:
-     rag_path = DATA_DIR / region / "rags.csv"
- 
--    layers = {}
--    for layer_name in ["phenology", "soil", "topography"]:
--        layer_file = context_dir / f"{layer_name}.csv"
--        if layer_file.exists():
--            layers[layer_name] = pd.read_csv(layer_file)
--        else:
--            print(f"‚ö†Ô∏è Missing layer: {layer_name}.csv")
--
--    # Merge summaries into flat table
-     summary = {
-         "region": region,
-         "timestamp": datetime.utcnow().isoformat(),
-         "n_crops": len(layers.get("phenology", [])),
--        "soil_mean_sand": layers.get("soil", pd.DataFrame()).get("mean_pct", pd.Series([None]))[0],
--        "elevation_mean": layers.get("topography", pd.DataFrame()).get("elevation_m", pd.Series([None]))[0],
-+        "soil_mean_sand": layers.get("soil", pd.DataFrame()).get("sand_pct", pd.Series([None])).iloc[0]
-+        if "sand_pct" in layers.get("soil", pd.DataFrame()).columns
-+        else layers.get("soil", pd.DataFrame()).get("mean_pct", pd.Series([None])).iloc[0]
-+        if not layers.get("soil", pd.DataFrame()).empty
-+        else None,
-+        "elevation_mean": layers.get("topography", pd.DataFrame()).get("elevation_m", pd.Series([None])).iloc[0]
-+        if not layers.get("topography", pd.DataFrame()).empty
-+        else None,
-     }
-+
-     df = pd.DataFrame([summary])
-     df.to_csv(rag_path, index=False)
-     print(f"‚úÖ Wrote summary RAG ‚Üí {rag_path}")
-     return df
- 
- 
- # -------------------------------------------------
- # Main pipeline
- # -------------------------------------------------
- def build_rag_context(region: str):
-     region_meta = load_region_meta(region)
-     print(f"üåç Building RAG context layers for {region}")
-     print(f"üó∫Ô∏è  BBOX: {region_meta.get('bbox')} | Crops: {region_meta.get('crops')}")
- 
--    pheno_df = fetch_phenology(region_meta)
--    soil_df = fetch_soil(region_meta)
--    topo_df = fetch_topography(region_meta)
--
--    save_layer(region, "phenology", pheno_df)
--    save_layer(region, "soil", soil_df)
--    save_layer(region, "topography", topo_df)
--
--    build_rags_summary(region)
-+    ensure_region_workspace(region)
-+    layers = collect_layers(region)
-+    if not layers:
-+        print("‚ùå No context layers available even after rebuild. Aborting.")
-+        return
-+
-+    build_rags_summary(region, layers)
-+    workspace = ensure_region_workspace(region)
-+    workspace_out = workspace / "insights" / "rags.csv"
-+    workspace_out.parent.mkdir(parents=True, exist_ok=True)
-+    shutil.copy2(DATA_DIR / region / "rags.csv", workspace_out)
-+    print(f"üóÇÔ∏è  Synced RAG summary to workspace ‚Üí {workspace_out.relative_to(workspace)}")
-     print(f"üéâ Context layers built successfully for {region}")
- 
- 
- # -------------------------------------------------
- # CLI
- # -------------------------------------------------
- if __name__ == "__main__":
-     parser = argparse.ArgumentParser(description="Build RAG (context) layers for a region.")
-     parser.add_argument("--region", required=True, help="Region name, e.g. hungary_farmland")
-     args = parser.parse_args()
-     build_rag_context(args.region)
-diff --git a/scripts/build_region_cache.py b/scripts/build_region_cache.py
-index 97617397a645497da21dd62fa46b450bfa2edee4..9f14987f0e852fc7bb24ab827a312debab1f954c 100644
---- a/scripts/build_region_cache.py
-+++ b/scripts/build_region_cache.py
-@@ -1,78 +1,74 @@
- #!/usr/bin/env python3
- """
- Build region cache by merging all fetcher outputs (CHIRPS, SMAP, NDVI, ERA5)
- into unified daily and monthly CSVs, with mixed-granularity alignment.
- 
- Outputs:
- - data/<region>/daily_merged.csv
- - data/<region>/monthly_merged.csv
- - data/<region>/metadata.json
- """
- 
- import argparse
- import pandas as pd
- from pathlib import Path
- import json
- import subprocess
- import sys
--import yaml
-+from _shared import load_region_profile
- 
- # ------------------------------------------------------------
- # Ensure local dependencies before proceeding
- # ------------------------------------------------------------
- required = ["pandas", "pyyaml", "requests"]
- missing = []
- for pkg in required:
-     try:
-         __import__(pkg)
-     except ImportError:
-         missing.append(pkg)
- 
- if missing:
-     print(f"üì¶ Installing missing dependencies for cache builder: {', '.join(missing)}")
-     subprocess.check_call([sys.executable, "-m", "pip", "install", *missing])
- else:
-     print("‚úÖ Dependencies ready inside virtual environment.")
- 
- # ------------------------------------------------------------
- # Helper: load CSVs
- # ------------------------------------------------------------
- def load_csv(path: Path, name: str) -> pd.DataFrame:
-     print(f"üì• Loading {name} from {path}")
-     return pd.read_csv(path, parse_dates=["date"])
- 
- # ------------------------------------------------------------
- # Helper: load bbox from region YAML
- # ------------------------------------------------------------
- def load_bbox_from_yaml(region: str):
--    """Load bounding box from region YAML config."""
--    cfg_path = Path("config") / f"insight.{region}.yml"
--    if not cfg_path.exists():
--        raise FileNotFoundError(f"Missing region config: {cfg_path}")
--    with open(cfg_path, "r") as f:
--        cfg = yaml.safe_load(f)
-+    """Load bounding box from the region profile."""
-+    cfg = load_region_profile(region)
-     bbox = cfg.get("region_meta", {}).get("bbox") or []
-     if not bbox or len(bbox) != 4:
-         raise ValueError(f"Invalid bbox in config: {bbox}")
-     return bbox
- 
- # ------------------------------------------------------------
- # Harmonize to daily grid (mixed-granularity)
- # ------------------------------------------------------------
- def harmonize_to_daily(dfs: dict) -> tuple[pd.DataFrame, dict]:
-     """Align mixed-frequency variables to common daily grid while preserving fidelity."""
-     start = max(df["date"].min() for df in dfs.values())
-     end = min(df["date"].max() for df in dfs.values())
-     daily_index = pd.date_range(start, end, freq="D")
- 
-     out_df = pd.DataFrame({"date": daily_index})
-     provenance = {}
- 
-     for var, df in dfs.items():
-         df = df.copy()
-         df["date"] = pd.to_datetime(df["date"])
-         df = df[(df["date"] >= start) & (df["date"] <= end)]
-         df = df.set_index("date").sort_index()
-         col = [c for c in df.columns if var in c or var.replace("_mean", "") in c]
-         col = col[0] if col else df.columns[-1]
-         df = df[[col]].rename(columns={col: var})
-@@ -102,65 +98,66 @@ def build_region_cache(region: str):
- 
-     valid_files = {
-         "precip_mm_sum": "chirps_gee.csv",
-         "soil_surface_moisture": "soil_gee.csv",
-         "soil_rootzone_moisture": "soil_gee.csv",
-         "ndvi": "ndvi_gee.csv",
-         "t2m_mean": "openmeteo.csv",
-         "t2m_max": "openmeteo.csv",
-         "t2m_min": "openmeteo.csv",
-     }
- 
-     dfs = {}
-     for var, fname in valid_files.items():
-         fp = base / fname
-         if fp.exists():
-             dfs[var] = load_csv(fp, fname)
-         else:
-             print(f"‚ö†Ô∏è Missing fetcher file for {var}: {fname}")
- 
-     # ------------------------------------------------------------
-     # Auto-fetch missing datasets if needed
-     # ------------------------------------------------------------
-     if not dfs:
-         print(f"‚ö†Ô∏è No valid fetcher files found for region {region}. Attempting to auto-fetch...")
-         bbox = load_bbox_from_yaml(region)
-+        script_root = Path(__file__).resolve().parent
-         required = {
--            "chirps_gee.csv": "scripts/fetch_chirps.py",
--            "soil_gee.csv": "scripts/fetch_soil.py",
--            "ndvi_gee.csv": "scripts/fetch_ndvi.py",
--            "openmeteo.csv": "scripts/fetch_openmeteo.py",
-+            "chirps_gee.csv": script_root / "fetch_chirps_gee.py",
-+            "soil_gee.csv": script_root / "fetch_soil_gee.py",
-+            "ndvi_gee.csv": script_root / "fetch_ndvi_gee.py",
-+            "openmeteo.csv": script_root / "fetch_openmeteo.py",
-         }
- 
-         for file, fetcher in required.items():
-             target = base / file
--            if not target.exists() and Path(fetcher).exists():
-+            if not target.exists() and fetcher.exists():
-                 print(f"üåç Fetching missing dataset: {file}")
-                 try:
-                     subprocess.run(
-                         [
--                            sys.executable, fetcher,
-+                            sys.executable, str(fetcher),
-                             "--bbox", *map(str, bbox),
-                             "--out", str(target)
-                         ],
-                         check=True
-                     )
-                 except Exception as e:
-                     print(f"‚ö†Ô∏è Auto-fetch for {file} failed: {e}")
- 
-         # Try reloading after fetch
-         for var, fname in valid_files.items():
-             fp = base / fname
-             if fp.exists():
-                 dfs[var] = load_csv(fp, fname)
- 
-         if not dfs:
-             raise RuntimeError(f"No valid fetcher files found for region {region} after auto-fetch attempts")
- 
-     # ------------------------------------------------------------
-     # Continue normal processing
-     # ------------------------------------------------------------
-     out_df, provenance = harmonize_to_daily(dfs)
- 
-     daily_out = base / "daily_merged.csv"
-     out_df.to_csv(daily_out, index=False)
-     print(f"‚úÖ Saved daily merged ‚Üí {daily_out.name} ({len(out_df)} rows)")
-diff --git a/scripts/build_region_insights.py b/scripts/build_region_insights.py
-index 98f3b8b04dbf2a856cb0816f7d5931b24333127c..6abaf350c90f6ac4912eac5c08f70020c6b6641a 100644
---- a/scripts/build_region_insights.py
-+++ b/scripts/build_region_insights.py
-@@ -1,55 +1,57 @@
- #!/usr/bin/env python3
- """
- Compute climate anomalies, short-term deltas, and derived insights for each region.
- 
- Reads:
-   data/<region>/daily_merged.csv and/or monthly_merged.csv
--  config/insight.<region>.yml
-+  regions/profiles/insight.<region>.yml
-   data/<region>/context_layers/{soil.csv, topography.csv, phenology_*.csv}
- 
- Writes:
-   data/<region>/insights_daily.csv   (if daily available)
-   data/<region>/insights_monthly.csv (otherwise)
- """
- 
- import argparse
- from pathlib import Path
- import pandas as pd
- import numpy as np
-+import shutil
- import sys
- import yaml
-+
-+from _shared import ensure_region_workspace, load_region_profile
- from datetime import datetime
- 
- try:
-     from scripts.init_region import init_region
- except ImportError:
-     from init_region import init_region
- 
- ROOT = Path(__file__).resolve().parents[1]
- DATA_DIR = ROOT / "data"
--CONFIG_DIR = ROOT / "config"
- 
- 
- # ------------------------------------------------------------
- # Helpers
- # ------------------------------------------------------------
- 
- def compute_baseline(df, col, start_year, end_year):
-     df = df.copy()
-     df["year"] = df["date"].dt.year
-     df["month"] = df["date"].dt.month
-     base = df.loc[(df["year"] >= start_year) & (df["year"] <= end_year)]
-     return base.groupby("month")[col].mean()
- 
- 
- def anomaly_series(df, col, baseline):
-     df = df.copy()
-     df["month"] = df["date"].dt.month
-     df[f"{col}_anomaly_clim"] = df[col] - df["month"].map(baseline)
-     df[f"{col}_ratio_clim"] = df[col] / df["month"].map(baseline)
-     return df
- 
- 
- def rolling_anomaly(df, col, window=30):
-     df = df.copy()
-     roll_mean = df[col].rolling(window=window, min_periods=5, center=True).mean()
-@@ -100,58 +102,54 @@ def to_doy(val):
- 
- 
- def merge_single_row_context(df, ctx_df, prefix=""):
-     if ctx_df is None or ctx_df.empty:
-         return df
-     row = ctx_df.iloc[0].copy()
-     for k, v in row.items():
-         df[f"{prefix}{k}"] = v
-     return df
- 
- 
- def read_csv_safe(path):
-     try:
-         return pd.read_csv(path) if path.exists() else None
-     except Exception as e:
-         print(f"‚ö†Ô∏è  Could not read {path}: {e}")
-         return None
- 
- 
- # ------------------------------------------------------------
- # Main logic
- # ------------------------------------------------------------
- 
- def build_region_insights(region):
-     init_region(region)
-+    workspace = ensure_region_workspace(region)
- 
--    cfg_path = CONFIG_DIR / f"insight.{region}.yml"
--    if cfg_path.exists():
--        with open(cfg_path, "r") as f:
--            cfg = yaml.safe_load(f)
--        baseline_cfg = cfg.get("baseline", {"start_year": 2010, "end_year": 2022})
--    else:
--        baseline_cfg = {"start_year": 2010, "end_year": 2022}
-+    cfg = load_region_profile(region)
-+    baseline_cfg = cfg.get("baseline", {"start_year": 2010, "end_year": 2022})
- 
-     region_dir = DATA_DIR / region
-     daily_file = region_dir / "daily_merged.csv"
-     monthly_file = region_dir / "monthly_merged.csv"
- 
-     if daily_file.exists():
-         df = pd.read_csv(daily_file, parse_dates=["date"])
-         freq = "daily"
-         print(f"üìÇ Loaded {len(df)} daily records for {region}")
-     elif monthly_file.exists():
-         df = pd.read_csv(monthly_file, parse_dates=["date"])
-         freq = "monthly"
-         print(f"üìÇ Loaded {len(df)} monthly records for {region}")
-     else:
-         print(f"‚ùå No merged data found for {region}.", file=sys.stderr)
-         sys.exit(1)
- 
-     print(f"üìÖ Baseline: {baseline_cfg['start_year']}‚Äì{baseline_cfg['end_year']}")
- 
-     # ---- Temperature ----
-     t_cols = [c for c in df.columns if "t2m_mean" in c.lower()]
-     if t_cols:
-         col = t_cols[0]
-         baseline = compute_baseline(df, col, **baseline_cfg)
-         df = anomaly_series(df, col, baseline)
-@@ -204,34 +202,39 @@ def build_region_insights(region):
- 
-         phen_files = list(ctx_dir.glob("phenology_*.csv"))
-         if phen_files:
-             for pf in phen_files:
-                 crop = pf.stem.replace("phenology_", "")
-                 pdf = read_csv_safe(pf)
-                 if pdf is not None and not pdf.empty:
-                     cols = {c.lower(): c for c in pdf.columns}
-                     if "planting_date" in cols:
-                         df[f"phen_planting_doy__{crop}"] = to_doy(pdf[cols["planting_date"]].iloc[0])
-                     if "flowering_date" in cols:
-                         df[f"phen_flowering_doy__{crop}"] = to_doy(pdf[cols["flowering_date"]].iloc[0])
-                     if "harvest_date" in cols:
-                         df[f"phen_harvest_doy__{crop}"] = to_doy(pdf[cols["harvest_date"]].iloc[0])
-             print(f"üåæ Merged phenology DOY columns for {len(phen_files)} crop(s).")
-         else:
-             print("üåæ No phenology_*.csv files found; skipping phenology merge.")
-     else:
-         print("‚ÑπÔ∏è  No context_layers directory; skipping context merge.")
- 
-     # ---- Output ----
-     out_file = region_dir / f"insights_{freq}.csv"
-     df.to_csv(out_file, index=False)
-     print(f"‚úÖ Wrote enriched insights ‚Üí {out_file}")
- 
-+    workspace_out = workspace / "insights" / out_file.name
-+    workspace_out.parent.mkdir(parents=True, exist_ok=True)
-+    shutil.copy2(out_file, workspace_out)
-+    print(f"üóÇÔ∏è  Synced insights to workspace ‚Üí {workspace_out.relative_to(workspace)}")
-+
- 
- # ------------------------------------------------------------
- # Entrypoint
- # ------------------------------------------------------------
- if __name__ == "__main__":
-     p = argparse.ArgumentParser(description="Compute climate anomalies and insights for a region (Phase A enriched).")
-     p.add_argument("--region", required=True)
-     args = p.parse_args()
-     build_region_insights(args.region)
-diff --git a/scripts/compute_anomalies.py b/scripts/compute_anomalies.py
-index 978600c6b1078599dd88ebe74a6593d4d3b511ee..b010be59ecd77fcf148773586d32381ec70489a5 100644
---- a/scripts/compute_anomalies.py
-+++ b/scripts/compute_anomalies.py
-@@ -42,88 +42,95 @@ def compute_rolling_anomalies(df, window=30, min_periods=10):
- 
- 
- # ------------------------------------------------------------
- # Helper: Update metadata.json
- # ------------------------------------------------------------
- def update_metadata(region_dir, summary_dict):
-     meta_path = region_dir / "metadata.json"
-     if meta_path.exists():
-         try:
-             with open(meta_path, "r") as f:
-                 meta = json.load(f)
-         except json.JSONDecodeError:
-             meta = {}
-     else:
-         meta = {}
- 
-     meta["anomaly_computation"] = summary_dict
-     with open(meta_path, "w") as f:
-         json.dump(meta, f, indent=2)
-     print(f"üßæ Metadata updated ‚Üí {meta_path}")
- 
- 
- # ------------------------------------------------------------
- # Helper: Visualization
- # ------------------------------------------------------------
--def plot_ndvi_anomalies(df, region_name):
-+def plot_ndvi_anomalies(df, region_name, plot_format="svg"):
-     if "ndvi_anomaly" not in df.columns:
-         print("‚ö†Ô∏è No NDVI anomaly column found ‚Äî skipping visualization.")
-         return
- 
-     plt.figure(figsize=(10, 4))
-     plt.plot(df["date"], df["ndvi_anomaly"], color="green", linewidth=1.2)
-     plt.axhline(0, color="gray", linestyle="--", linewidth=0.8)
-     plt.title(f"NDVI Anomalies ‚Äì {region_name}")
-     plt.xlabel("Date")
-     plt.ylabel("Z-Score")
-     plt.tight_layout()
--    out_path = Path(f"data/{region_name}/ndvi_anomaly_preview.png")
--    plt.savefig(out_path, dpi=150)
-+    out_path = Path(f"data/{region_name}/ndvi_anomaly_preview.{plot_format}")
-+    save_kwargs = {"dpi": 150} if plot_format.lower() == "png" else {}
-+    plt.savefig(out_path, **save_kwargs)
-     plt.close()
-     print(f"üìä NDVI anomaly plot saved ‚Üí {out_path}")
- 
- 
- # ------------------------------------------------------------
- # Main
- # ------------------------------------------------------------
- def main():
-     parser = argparse.ArgumentParser(description="Compute rolling anomalies for a region.")
-     parser.add_argument("--region", required=True, help="Region name (e.g. austin_farmland)")
-     parser.add_argument("--window", type=int, default=30, help="Rolling window size (days)")
-+    parser.add_argument(
-+        "--plot-format",
-+        choices=["svg", "png"],
-+        default="svg",
-+        help="Image format for the optional NDVI anomaly preview.",
-+    )
-     args = parser.parse_args()
- 
-     region_dir = Path("data") / args.region
-     input_path = region_dir / "daily_merged.csv"
-     output_path = region_dir / "daily_anomalies.csv"
- 
-     if not input_path.exists():
-         print(f"‚ùå Missing dataset: {input_path}")
-         sys.exit(1)
- 
-     print(f"üìÇ Loading data ‚Üí {input_path}")
-     df = pd.read_csv(input_path, parse_dates=["date"])
-     df = df.sort_values("date").reset_index(drop=True)
- 
-     anomalies = compute_rolling_anomalies(df, window=args.window)
-     df_out = pd.concat([df, anomalies], axis=1)
-     df_out.to_csv(output_path, index=False)
-     print(f"‚úÖ Saved enriched dataset ‚Üí {output_path} ({len(df_out)} rows)")
- 
-     # Summarize
-     summary = {
-         "window_days": args.window,
-         "columns_processed": len(anomalies.columns),
-         "date_range": [str(df['date'].min().date()), str(df['date'].max().date())],
-     }
-     update_metadata(region_dir, summary)
- 
-     # Visualization
-     try:
--        plot_ndvi_anomalies(df_out, args.region)
-+        plot_ndvi_anomalies(df_out, args.region, plot_format=args.plot_format)
-     except Exception as e:
-         print(f"‚ö†Ô∏è Visualization failed: {e}")
- 
-     print("üéâ Anomaly computation complete.")
- 
- 
- if __name__ == "__main__":
-     main()
-diff --git a/scripts/fetch_all.py b/scripts/fetch_all.py
-index 0cb3cf230ddb6cf785e6be4169c77c96329451e3..1952ef7b18146648fc89eb938f7a12470c1e0992 100644
---- a/scripts/fetch_all.py
-+++ b/scripts/fetch_all.py
-@@ -1,134 +1,133 @@
- #!/usr/bin/env python3
- """
- Fetch all datasets for a region (CHIRPS, SMAP, NDVI, Open-Meteo).
- 
- - Ensures Earth Engine client is installed & authenticated BEFORE running GEE fetchers.
--- Reads BBOX primarily from config/insight.<region>.yml, falls back to internal map.
-+- Reads BBOX primarily from regions/profiles/insight.<region>.yml, falls back to internal map.
- - Uses current venv's Python (sys.executable).
- 
- Usage:
-   python scripts/fetch_all.py --region hungary_farmland --mode active
- """
- 
- from __future__ import annotations
- import argparse
- import subprocess
- import sys
- import time
- from datetime import datetime, timezone
- from pathlib import Path
- from typing import List, Optional
- import yaml
- import os
- 
-+from _shared import load_region_profile
-+
- # ---------------------------------------------------------------------
- # üîß Path safety ‚Äî allows running this file directly OR via other scripts
- # ---------------------------------------------------------------------
- sys.path.append(os.path.dirname(__file__))                      # scripts/
- sys.path.append(os.path.dirname(os.path.dirname(__file__)))     # project root
- 
- try:
-     from gee_setup import ensure_gee_ready
- except ModuleNotFoundError:
-     from scripts.gee_setup import ensure_gee_ready
- 
- # ---------------------------------------------------------------------
- # Paths and constants
- # ---------------------------------------------------------------------
- ROOT = Path(__file__).resolve().parents[1]
- DATA_DIR = ROOT / "data"
- SCRIPTS = ROOT / "scripts"
- 
- REGION_BBOXES = {
-     "hungary_farmland": [16.0, 45.5, 23.0, 48.6],
-     "jamaica_coffee":   [-78.2, 17.7, -76.0, 18.5],
-     "austin_farmland":  [-97.708351, 30.16754, -97.447254, 30.28264],
- }
- 
- # üîÅ Dynamic data fetchers (no NASA POWER)
- FETCHERS = {
-     "chirps": "fetch_chirps_gee.py",
-     "soil":   "fetch_soil_gee.py",
-     "ndvi":   "fetch_ndvi_gee.py",
-     "temp":   "fetch_openmeteo.py",  # Open-Meteo replaces NASA POWER
- }
- 
- # ---------------------------------------------------------------------
- # Helpers
- # ---------------------------------------------------------------------
- def _read_bbox_from_yaml(region: str) -> Optional[List[float]]:
--    """Read bounding box from region config YAML if available."""
--    cfg_path = ROOT / "config" / f"insight.{region}.yml"
--    if not cfg_path.exists():
--        return None
-+    """Read bounding box from region profile if available."""
-     try:
--        cfg = yaml.safe_load(cfg_path.read_text())
--        bbox = cfg.get("region_meta", {}).get("bbox")
--        if isinstance(bbox, list) and len(bbox) == 4:
--            return [float(b) for b in bbox]
--    except Exception:
--        pass
-+        cfg = load_region_profile(region)
-+    except FileNotFoundError:
-+        return None
-+    bbox = cfg.get("region_meta", {}).get("bbox")
-+    if isinstance(bbox, list) and len(bbox) == 4:
-+        return [float(b) for b in bbox]
-     return None
- 
- 
- def run_fetch(script_name: str, bbox: List[float], out_path: Path, mode: str) -> bool:
-     """Run a single fetcher script safely using the same Python executable."""
-     script_path = SCRIPTS / script_name
-     if not script_path.exists():
-         print(f"‚ö†Ô∏è  Missing script: {script_name}")
-         return False
- 
-     cmd = [
-         sys.executable,
-         str(script_path),
-         "--bbox", *map(str, bbox),
-         "--mode", mode,
-         "--out", str(out_path),
-     ]
- 
-     print(f"\nüöÄ Running {' '.join(cmd)}")
-     start = time.time()
-     try:
-         subprocess.run(cmd, check=True)
-         print(f"‚úÖ {script_name} completed in {time.time() - start:.1f}s.")
-         return True
-     except subprocess.CalledProcessError as e:
-         print(f"‚ùå {script_name} failed ({e}) after {time.time() - start:.1f}s.")
-         return False
- 
- 
- # ---------------------------------------------------------------------
- # Main flow
- # ---------------------------------------------------------------------
- def main(region: str, mode: str, ee_project: Optional[str]) -> None:
-     print(f"\nüåç Fetching all datasets for region: {region}")
-     print(f"üì¶ Mode: {mode}")
- 
-     bbox = _read_bbox_from_yaml(region) or REGION_BBOXES.get(region)
-     if not bbox:
--        print(f"‚ùå No BBOX found for '{region}'. Add it to config/insight.{region}.yml or REGION_BBOXES.")
-+        print(f"‚ùå No BBOX found for '{region}'. Add it to regions/profiles/insight.{region}.yml or REGION_BBOXES.")
-         sys.exit(1)
-     print(f"üó∫  Bounding Box: {bbox}")
- 
-     region_dir = DATA_DIR / region
-     region_dir.mkdir(parents=True, exist_ok=True)
- 
-     # Step 1: Ensure Earth Engine is ready before GEE fetchers
-     ee_ready = ensure_gee_ready(project=ee_project)
- 
-     # Step 2: Run each fetcher
-     for key, script_name in FETCHERS.items():
-         out_file = region_dir / (f"{key}_gee.csv" if key != "temp" else "openmeteo.csv")
- 
-         # Skip GEE-dependent fetchers if EE not ready
-         if key in ("chirps", "soil", "ndvi") and not ee_ready:
-             print(f"‚ö†Ô∏è Skipping {key} (Earth Engine not initialized).")
-             continue
- 
-         success = run_fetch(script_name, bbox, out_file, mode)
-         if not success:
-             print(f"‚ö†Ô∏è  {key} fetch failed ‚Äî continuing.\n")
- 
-     # Step 3: Wrap-up summary
-     print("\nüéâ All fetchers completed (with above status).")
-     print(f"üïí Finished at {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S %Z')}")
-diff --git a/scripts/fetch_phenology.py b/scripts/fetch_phenology.py
-index 0cc11f9daf21a338bac8cfd4243c080674954f42..3eb3a8f7b254a4a249d2c0dd0827d0f277df0c46 100644
---- a/scripts/fetch_phenology.py
-+++ b/scripts/fetch_phenology.py
-@@ -1,94 +1,92 @@
- #!/usr/bin/env python3
- """
- Fetch daily agroclimatic data from NASA POWER API to build phenology context layers.
- 
- These layers provide the environmental drivers (temperature, rainfall, radiation, humidity, etc.) 
- that underpin phenological development for each crop in a region.
- 
- Includes automatic bioclimatic zone detection (tropical, arid, temperate, boreal)
- to adjust variable emphasis regionally.
- 
- Output: data/<region>/context_layers/phenology_<crop>.csv
- """
- 
- import argparse
- import requests
- import pandas as pd
- from pathlib import Path
- import json
- from datetime import datetime
- import yaml
-+
-+from _shared import load_region_profile
- from config.climate_zone_lookup import get_climate_zone
- 
- from config.crop_variable_map import (
-     CROP_VARIABLE_MAP,
-     FALLBACK_VARIABLES,
-     classify_bioclimate,
-     apply_regional_overrides,
- )
- 
- NASA_POWER_URL = "https://power.larc.nasa.gov/api/temporal/daily/point"
- 
- 
- # ------------------------------------------------------------
- # Helper: Fetch data from NASA POWER
- # ------------------------------------------------------------
- def fetch_power_data(lat, lon, variables, start, end):
-     params = {
-         "latitude": lat,
-         "longitude": lon,
-         "parameters": ",".join(variables),
-         "start": start.strftime("%Y%m%d"),
-         "end": end.strftime("%Y%m%d"),
-         "format": "JSON",
-         "community": "AG",
-     }
-     r = requests.get(NASA_POWER_URL, params=params, timeout=30)
-     if r.status_code == 200:
-         data = r.json().get("properties", {}).get("parameter", {})
-         if not data:
-             raise ValueError("Empty NASA POWER response.")
-         df = pd.DataFrame(data)
-         df.index = pd.to_datetime(df.index)
-         df.reset_index(inplace=True)
-         df.rename(columns={"index": "date"}, inplace=True)
-         return df
-     else:
-         raise RuntimeError(f"NASA POWER request failed ({r.status_code}): {r.text[:200]}")
- 
- 
- # ------------------------------------------------------------
- # Main
- # ------------------------------------------------------------
- def main(region: str):
-     # Load region config
--    cfg_path = Path("config") / f"insight.{region}.yml"
--    if not cfg_path.exists():
--        raise FileNotFoundError(f"No region config found at {cfg_path}")
--
--    cfg = yaml.safe_load(cfg_path.read_text())
-+    cfg = load_region_profile(region)
-     bbox = cfg["region_meta"]["bbox"]
-     crops = cfg["region_meta"]["crops"]
-     country = cfg["region_meta"].get("country", "unknown")
- 
-     # Determine center point for API calls
-     lat = (bbox[1] + bbox[3]) / 2
-     lon = (bbox[0] + bbox[2]) / 2
- 
-     # Detect climate zone via K√∂ppen‚ÄìGeiger lookup
-     climate_info = get_climate_zone(lat, lon)
-     bioclimate = climate_info["zone"]
-     koppen_code = climate_info["koppen"]
-     if koppen_code:
-         print(f"üåç Detected climate zone: {bioclimate} (K√∂ppen {koppen_code})")
-     else:
-         print(f"üåç Estimated climate zone: {bioclimate} (latitude-based fallback)")
- 
-     start = datetime(2019, 1, 1)
-     end = datetime.today()
- 
-     out_dir = Path("data") / region / "context_layers"
-     out_dir.mkdir(parents=True, exist_ok=True)
- 
-     summary = {}
-     for crop in crops:
-@@ -127,28 +125,28 @@ def main(region: str):
-                     "bioclimate": bioclimate,
-                     "koppen_code": koppen_code,
-                     "status": "fallback",
-                 }
-             except Exception as e2:
-                 print(f"‚ùå Fallback failed for {crop_key}: {e2}")
-                 summary[crop_key] = {
-                     "variables": FALLBACK_VARIABLES,
-                     "bioclimate": bioclimate,
-                     "koppen_code": koppen_code,
-                     "status": "failed",
-                 }
- 
-     # Write metadata
-     meta_path = out_dir / "phenology_metadata.json"
-     with open(meta_path, "w") as f:
-         json.dump(summary, f, indent=2)
-     print(f"üßæ Metadata saved ‚Üí {meta_path}")
- 
- 
- # ------------------------------------------------------------
- # Entrypoint
- # ------------------------------------------------------------
- if __name__ == "__main__":
-     p = argparse.ArgumentParser(description="Fetch NASA POWER agroclimatic data for phenology context.")
--    p.add_argument("--region", required=True, help="Region name matching config/insight.<region>.yml")
-+    p.add_argument("--region", required=True, help="Region name matching regions/profiles/insight.<region>.yml")
-     args = p.parse_args()
-     main(args.region)
-diff --git a/scripts/flag_anomalies.py b/scripts/flag_anomalies.py
-index f05249e30adbf98283332404b70b252434838096..1be36add302e5b8b8e642a203441111795ebb71e 100644
---- a/scripts/flag_anomalies.py
-+++ b/scripts/flag_anomalies.py
-@@ -1,84 +1,105 @@
- import pandas as pd, numpy as np, yaml, json
- from datetime import timedelta
- from pathlib import Path
- import operator
- 
-+from _shared import resolve_region_config_path
-+
- OPS = {
-     "<": operator.lt, "<=": operator.le, ">": operator.gt, ">=": operator.ge, "==": operator.eq, "!=": operator.ne
- }
- 
- def load_config(path):
--    cfg = yaml.safe_load(Path(path).read_text())
-+    config_path = Path(path)
-+    cfg = yaml.safe_load(config_path.read_text())
-     if "extends" in cfg:
--        base = yaml.safe_load(Path(cfg["extends"]).read_text())
-+        extend_path = Path(cfg["extends"])
-+        if not extend_path.is_absolute():
-+            extend_path = config_path.parent / extend_path
-+        base = yaml.safe_load(extend_path.read_text())
-         # shallow merge (good enough for our simple shapes)
-         base.update({k:v for k,v in cfg.items() if k!="extends"})
-         cfg = base
-     return cfg
- 
- def eval_clause(row, clause):
-     var, op, val = clause["var"], clause["op"], clause["value"]
-     if var not in row or pd.isna(row[var]): return False
-     fn = OPS[op]
-     return bool(fn(row[var], val))
- 
- def eval_when(row, tree):
-     # Supports {"all":[clauses]} and/or {"any":[clauses]} nesting one level
-     if "all" in tree:
-         if not all(eval_clause(row, c) for c in tree["all"]): return False
-     if "any" in tree:
-         if not any(eval_clause(row, c) for c in tree["any"]): return False
-     return True
- 
--def main(region:str, config_path:str):
-+def main(region: str, config_path: str | None = None):
-     rp = Path(f"data/{region}")
--    df = pd.read_csv(rp/"insight_daily.csv", parse_dates=["date"]).sort_values("date")
--    cfg = load_config(config_path)
-+    daily_paths = [
-+        rp / "insights_daily.csv",
-+        rp / "insight_daily.csv",
-+        rp / "daily_merged.csv",
-+    ]
-+    for candidate in daily_paths:
-+        if candidate.exists():
-+            df = pd.read_csv(candidate, parse_dates=["date"]).sort_values("date")
-+            break
-+    else:
-+        raise FileNotFoundError(
-+            f"No daily insight/cache file found for {region}. Looked for: {', '.join(str(p) for p in daily_paths)}"
-+        )
-+
-+    if config_path is None:
-+        config_path = resolve_region_config_path(region)
-+    cfg = load_config(str(config_path))
- 
-     rules = cfg.get("rules", [])
-     flags = []
-     for _, row in df.iterrows():
-         for rule in rules:
-             if eval_when(row, rule["when"]):
-                 flags.append({
-                     "date": row["date"].date().isoformat(),
-                     "rule_id": rule["id"],
-                     "label": rule.get("label", rule["id"]),
-                     "variables": {k: row[k] for k in row.index if k not in ("date",)}
-                 })
- 
-     # Write CSV + JSON + short MD digest
-     out_dir = rp/"flags"
-     out_dir.mkdir(parents=True, exist_ok=True)
- 
-     if flags:
-         flags_df = pd.DataFrame(flags)
-         flags_df.to_csv(out_dir/"flagged_anomalies.csv", index=False)
-         Path(out_dir/"flagged_anomalies.json").write_text(json.dumps(flags, indent=2))
- 
-         # Markdown digest (last 30 days)
-         last_date = pd.to_datetime(df["date"].max()).date()
-         cutoff = pd.Timestamp(last_date - timedelta(days=30)).date()
-         recent = [f for f in flags if pd.to_datetime(f["date"]).date() >= cutoff]
- 
-         lines = [f"# Anomaly Digest ‚Äî {region}",
-                  f"_Window: last 30 days through {last_date}_",
-                  ""]
-         if recent:
-             for f in recent:
-                 lines.append(f"- **{f['date']}** ‚Äî **{f['label']}** (`{f['rule_id']}`)")
-         else:
-             lines.append("No anomalies in the last 30 days.")
-         (out_dir/"digest_recent.md").write_text("\n".join(lines))
-         print(f"‚úÖ Flags written ‚Üí {out_dir}")
-     else:
-         print("‚úÖ No anomalies flagged. Nothing to write.")
-         (out_dir/"flagged_anomalies.csv").write_text("date,rule_id,label,variables\n")
- 
- if __name__ == "__main__":
-     import argparse
-     p = argparse.ArgumentParser()
-     p.add_argument("--region", required=True)
--    p.add_argument("--config", required=True)
-+    p.add_argument("--config", help="Optional path to a custom insight profile")
-     a = p.parse_args()
-     main(a.region, a.config)
-diff --git a/scripts/init_region.py b/scripts/init_region.py
-index 92d1ac8695c9574a94fd7fc6446090afb34b6a2b..37165632fe297193ad0d405489dda9af2001e72d 100644
---- a/scripts/init_region.py
-+++ b/scripts/init_region.py
-@@ -1,67 +1,67 @@
- #!/usr/bin/env python3
- """
- Auto-initialize a region's folder structure and config YAML.
- 
- Creates:
-   - data/<region>/flags/
-   - data/<region>/plots/
-   - data/<region>/context_layers/
--  - config/insight.<region>.yml (if missing)
-+  - regions/profiles/insight.<region>.yml (if missing)
- 
- Now includes:
-   ‚úÖ Full rolling/climatology variable structure
-   ‚úÖ Phase A rule dictionary for interpretive logic
-   ‚úÖ BBOX + crop list + metadata hooks for context layers
-   ‚úÖ Automatic context layer generation (soil, elevation, phenology)
- """
- import os, sys, subprocess
- import sys
- 
- # Ensure critical dependencies before doing anything
- required = ["pyyaml", "pandas", "requests"]
- missing = []
- for pkg in required:
-     try:
-         __import__(pkg)
-     except ImportError:
-         missing.append(pkg)
- 
- if missing:
-     print(f"üì¶ Installing missing dependencies: {', '.join(missing)} ...")
-     subprocess.check_call([sys.executable, "-m", "pip", "install", *missing])
- else:
-     print("‚úÖ Environment ready ‚Äî all dependencies found.")
- import yaml
- from pathlib import Path
- import subprocess
- 
- # -------------------------
- # Default Config Template
- # -------------------------
- DEFAULTS = {
--    "extends": "config/insight.defaults.yml",
-+    "extends": "insight.defaults.yml",
-     "baseline": {"start_year": 2010, "end_year": 2022},
-     "rolling": {"window_days": 30, "min_periods": 5},
-     "windows": {"spi_short": 30, "spi_long": 90, "plot_context_days": 60},
-     # üåç Core region metadata for later enrichment
-     "region_meta": {
-         "bbox": [None, None, None, None],  # [min_lon, min_lat, max_lon, max_lat]
-         "crops": ["maize"],                # list of crop names
-         "country": "unknown",
-         "notes": "placeholder ‚Äî auto-filled by user or agent",
-     },
-     # üåæ Variable registry
-     "variables": {
-         "temperature": {"column": "t2m_mean", "enabled": True},
-         "precipitation": {"column": "precip_mm_sum", "enabled": True},
-         "vegetation": {"column": "ndvi", "enabled": True},
-         "soil_moisture": {"column": "soil_surface_moisture", "enabled": True},
-     },
-     "outputs": {
-         "daily": True,
-         "monthly": True,
-         "include_climatology": True,
-         "include_rolling": True
-     },
-     # -------------------------------------------------
-     # üåç Phase A interpretive rule dictionary
-@@ -135,52 +135,52 @@ DEFAULTS = {
-                 ]
-             },
-             "note": "Strong NDVI increase suggests active growth or green-up.",
-         },
-         {
-             "id": "{region}_harvest_signal",
-             "label": "{REGION}: Potential harvest or senescence",
-             "when": {
-                 "all": [
-                     {"var": "Œîndvi_10d", "op": "<", "value": -0.1},
-                     {"var": "EVI2", "op": "<", "value": 0.4},
-                 ]
-             },
-             "note": "Vegetation decline with low canopy greenness (possible harvest).",
-         },
-     ],
- }
- 
- 
- # -------------------------------------------------
- # Region initialization logic
- # -------------------------------------------------
- def init_region(region_name: str, bbox=None, crops=None, country=None):
-     """Create necessary folders, YAML config, and context layers for a given region."""
- 
--    config_dir = Path("config")
--    config_dir.mkdir(exist_ok=True)  # ‚úÖ ensure config directory exists
-+    config_dir = Path("regions") / "profiles"
-+    config_dir.mkdir(parents=True, exist_ok=True)  # ‚úÖ ensure profile directory exists
- 
-     cfg_path = config_dir / f"insight.{region_name}.yml"
-     data_dir = Path("data") / region_name
- 
-     # Create directories
-     for sub in ["flags", "plots", "context_layers"]:
-         (data_dir / sub).mkdir(parents=True, exist_ok=True)
- 
-     # If YAML exists, don‚Äôt overwrite
-     if cfg_path.exists():
-         print(f"‚öôÔ∏è  Config already exists for {region_name} ‚Äî skipping creation.")
-     else:
-         # Generate new config
-         region_id = region_name.split("_")[0][:2].lower()
-         config_content = yaml.safe_load(yaml.dump(DEFAULTS))
- 
-         # Apply dynamic metadata
-         if bbox:
-             config_content["region_meta"]["bbox"] = bbox
-         if crops:
-             config_content["region_meta"]["crops"] = crops
-         if country:
-             config_content["region_meta"]["country"] = country
- 
-         # Replace placeholders dynamically
-diff --git a/scripts/train_region_model.py b/scripts/train_region_model.py
-index 02f407277a7559d5cb4890ede813dec9213e0f03..7c34fef77d98719aca7a07d5ed0376425443a131 100644
---- a/scripts/train_region_model.py
-+++ b/scripts/train_region_model.py
-@@ -1,90 +1,106 @@
- #!/usr/bin/env python3
- """
- Train Random Forest models for a given region, tier, and data frequency.
- 
- Usage:
-   python scripts/train_region_model.py --region austin_farmland --tier 2 --freq daily --target ndvi_zscore
- 
- Inputs:
-   - data/<region>/insights_<freq>.csv   (daily or monthly)
-   - Optional: phenology.csv, practice_logs.csv, rags.csv, context_layers/
- Outputs (created under models/<region>/):
-   - tier{tier}_{freq}_model.pkl
-   - tier{tier}_{freq}_feature_importances.csv
-   - tier{tier}_{freq}_metrics.json
- """
- 
- import argparse
- from pathlib import Path
- import pandas as pd
- import numpy as np
- import joblib
- import json
-+import shutil
- from datetime import datetime
- from sklearn.ensemble import RandomForestRegressor
- from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
- 
- from agent.features.builder import build_features
-+from _shared import ensure_region_workspace
- 
- # ------------------------------------------------------------
- # Helper: compute evaluation metrics
- # ------------------------------------------------------------
- def compute_metrics(y_true, y_pred):
-     """NaN-safe metrics computation."""
-     y_true, y_pred = np.array(y_true, dtype=float), np.array(y_pred, dtype=float)
-     mask = ~np.isnan(y_true) & ~np.isnan(y_pred)
-     if mask.sum() == 0:
-         return {"r2": np.nan, "mae": np.nan, "rmse": np.nan, "n": 0}
- 
-     y_true, y_pred = y_true[mask], y_pred[mask]
-     return {
-         "r2": round(r2_score(y_true, y_pred), 3),
-         "mae": round(mean_absolute_error(y_true, y_pred), 3),
-         "rmse": round(np.sqrt(mean_squared_error(y_true, y_pred)), 3),
-         "n": int(mask.sum()),
-     }
- 
- 
- # ------------------------------------------------------------
- # Main training function
- # ------------------------------------------------------------
- def train_region_model(region: str, tier: int = 1, target: str = "ndvi_zscore", freq: str = "monthly"):
-     region_path = Path("data") / region
-     model_dir = Path("models") / region
-     model_dir.mkdir(parents=True, exist_ok=True)
-+    workspace = ensure_region_workspace(region)
- 
-     # Determine which insights file to use
-+    requested_freq = freq
-     insight_file = region_path / f"insights_{freq}.csv"
-     if not insight_file.exists():
--        fallback = region_path / "insights_monthly.csv"
--        if fallback.exists():
--            insight_file = fallback
--            freq = "monthly"
--            print(f"‚ö†Ô∏è  No insights_{freq}.csv found; using monthly fallback.")
-+        legacy = region_path / f"insight_{freq}.csv"
-+        if legacy.exists():
-+            insight_file = legacy
-         else:
--            raise FileNotFoundError(f"No insight file found for {region} ({freq})")
-+            fallback = region_path / "insights_monthly.csv"
-+            if not fallback.exists():
-+                legacy_monthly = region_path / "insight_monthly.csv"
-+                if legacy_monthly.exists():
-+                    fallback = legacy_monthly
-+            if fallback.exists():
-+                insight_file = fallback
-+                freq = "monthly"
-+                print(
-+                    f"‚ö†Ô∏è  No insights_{requested_freq}.csv found; using monthly fallback."
-+                )
-+            else:
-+                raise FileNotFoundError(
-+                    f"No insight file found for {region}. Expected {region_path / f'insights_{freq}.csv'}"
-+                )
- 
-     print(f"üèó  Building Tier {tier} features for {region} ({freq} data)...")
-     X, y = build_features(region, tier, insight_file=insight_file, target=target)
-     if y is None or X.empty:
-         raise ValueError("No valid target or features found ‚Äî cannot train model.")
- 
-     print(f"üì¶ Feature matrix: {X.shape[0]} rows √ó {X.shape[1]} columns")
- 
-     # Temporal 80/20 split
-     split_idx = int(0.8 * len(X))
-     X_train, X_test = X.iloc[:split_idx], X.iloc[split_idx:]
-     y_train, y_test = y.iloc[:split_idx], y.iloc[split_idx:]
- 
-     print(f"üß© Split: {len(X_train)} train / {len(X_test)} test")
- 
-     # Train Random Forest
-     model = RandomForestRegressor(
-         n_estimators=300,
-         max_depth=None,
-         n_jobs=-1,
-         random_state=42
-     )
-     model.fit(X_train, y_train)
- 
-     # Evaluate
-@@ -100,38 +116,44 @@ def train_region_model(region: str, tier: int = 1, target: str = "ndvi_zscore",
- 
-     joblib.dump(model, model_file)
- 
-     importances = pd.DataFrame({
-         "feature": X.columns,
-         "importance": model.feature_importances_
-     }).sort_values("importance", ascending=False)
-     importances.to_csv(feat_file, index=False)
- 
-     with open(metrics_file, "w") as f:
-         json.dump({
-             "region": region,
-             "tier": tier,
-             "freq": freq,
-             "timestamp": timestamp,
-             "records": len(X),
-             "metrics": metrics
-         }, f, indent=2)
- 
-     print(f"‚úÖ Model trained and saved for {region} (Tier {tier}, {freq})")
-     print(f"üìà Metrics: R¬≤={metrics['r2']}  MAE={metrics['mae']}  RMSE={metrics['rmse']}  (n={metrics['n']})")
-     print(f"üß† Model ‚Üí {model_file}")
-     print(f"üìä Feature importances ‚Üí {feat_file}")
-     print(f"üìò Metrics ‚Üí {metrics_file}")
- 
-+    workspace_models = workspace / "models"
-+    workspace_models.mkdir(parents=True, exist_ok=True)
-+    for artifact in (model_file, feat_file, metrics_file):
-+        shutil.copy2(artifact, workspace_models / artifact.name)
-+    print(f"üóÇÔ∏è  Synced model artifacts to workspace ‚Üí {workspace_models.relative_to(workspace)}")
-+
- 
- # ------------------------------------------------------------
- # CLI
- # ------------------------------------------------------------
- if __name__ == "__main__":
-     p = argparse.ArgumentParser(description="Train a region-specific Random Forest model.")
-     p.add_argument("--region", required=True, help="Region name, e.g. hungary_farmland or austin_farmland")
-     p.add_argument("--tier", type=int, choices=[1, 2, 3], default=1)
-     p.add_argument("--target", default="ndvi_zscore", help="Target variable to predict")
-     p.add_argument("--freq", choices=["daily", "monthly"], default="monthly", help="Data frequency to use")
-     args = p.parse_args()
- 
-     train_region_model(args.region, args.tier, args.target, args.freq)
-diff --git a/src/regional_agent/__init__.py b/src/regional_agent/__init__.py
-new file mode 100644
-index 0000000000000000000000000000000000000000..337ffe07ba802e8f979b6695ac84304ac5e64695
---- /dev/null
-+++ b/src/regional_agent/__init__.py
-@@ -0,0 +1,15 @@
-+"""Core package utilities for the Situated Insight regional agent template."""
-+
-+from .config import (
-+    REGION_PROFILES_DIR,
-+    resolve_region_config_path,
-+    load_region_profile,
-+    ensure_region_workspace,
-+)
-+
-+__all__ = [
-+    "REGION_PROFILES_DIR",
-+    "resolve_region_config_path",
-+    "load_region_profile",
-+    "ensure_region_workspace",
-+]
-diff --git a/src/regional_agent/config.py b/src/regional_agent/config.py
-new file mode 100644
-index 0000000000000000000000000000000000000000..4e7a99a86e186db396109a9070703e46ed753a4c
---- /dev/null
-+++ b/src/regional_agent/config.py
-@@ -0,0 +1,76 @@
-+from __future__ import annotations
-+
-+import json
-+from pathlib import Path
-+from typing import Any, Dict
-+
-+import yaml
-+
-+ROOT = Path(__file__).resolve().parents[2]
-+REGION_PROFILES_DIR = ROOT / "regions" / "profiles"
-+LEGACY_CONFIG_DIR = ROOT / "config"
-+WORKSPACES_DIR = ROOT / "regions" / "workspaces"
-+
-+
-+def _ensure_directory(path: Path) -> Path:
-+    path.mkdir(parents=True, exist_ok=True)
-+    return path
-+
-+
-+def resolve_region_config_path(region: str) -> Path:
-+    """Return the path to the region profile, searching new and legacy layouts."""
-+    REGION_PROFILES_DIR.mkdir(parents=True, exist_ok=True)
-+    candidates = [
-+        REGION_PROFILES_DIR / f"insight.{region}.yml",
-+        REGION_PROFILES_DIR / f"{region}.yml",
-+        LEGACY_CONFIG_DIR / f"insight.{region}.yml",
-+        LEGACY_CONFIG_DIR / f"{region}.yml",
-+    ]
-+    for candidate in candidates:
-+        if candidate.exists():
-+            return candidate
-+    raise FileNotFoundError(
-+        f"No profile found for '{region}'. Looked in: "
-+        + ", ".join(str(c) for c in candidates)
-+    )
-+
-+
-+def load_region_profile(region: str) -> Dict[str, Any]:
-+    """Load a region profile and resolve inheritance."""
-+    profile_path = resolve_region_config_path(region)
-+    cfg = yaml.safe_load(profile_path.read_text())
-+    if "extends" in cfg:
-+        base_path = Path(cfg["extends"])
-+        if not base_path.is_absolute():
-+            base_path = profile_path.parent / base_path
-+        base = yaml.safe_load(base_path.read_text())
-+        base.update({k: v for k, v in cfg.items() if k != "extends"})
-+        cfg = base
-+    cfg.setdefault("region_meta", {})
-+    cfg["region_meta"].setdefault("key", region)
-+    cfg["region_meta"].setdefault("profile_path", str(profile_path))
-+    return cfg
-+
-+
-+def ensure_region_workspace(region: str) -> Path:
-+    """Ensure a dedicated workspace directory for interactive exploration."""
-+    workspace = _ensure_directory(WORKSPACES_DIR / region)
-+    (workspace / "logs").mkdir(exist_ok=True)
-+    (workspace / "insights").mkdir(exist_ok=True)
-+    (workspace / "models").mkdir(exist_ok=True)
-+    (workspace / "cache").mkdir(exist_ok=True)
-+    # Drop a lightweight manifest for discoverability.
-+    manifest = {
-+        "region": region,
-+        "profile": str(resolve_region_config_path(region)),
-+    }
-+    (workspace / "workspace.json").write_text(json.dumps(manifest, indent=2))
-+    return workspace
-+
-+
-+__all__ = [
-+    "REGION_PROFILES_DIR",
-+    "resolve_region_config_path",
-+    "load_region_profile",
-+    "ensure_region_workspace",
-+]
- 
-EOF
-)
\ No newline at end of filediff --git a/models/README.md b/models/README.md
new file mode 100644
index 0000000000000000000000000000000000000000..a655dc8a3ee81836fd3355279826635092b0ac71
--- /dev/null
+++ b/models/README.md
@@ -0,0 +1,5 @@
+# Model artifacts
+
+Binary checkpoints (for example, `*_model.pkl`) are intentionally not tracked in git. Run
+`python run_pipeline.py --region <slug> --insight` or `scripts/train_region_model.py` to
+materialise local models under `models/` as needed.diff --git a/notebooks/pipeline_demo.md b/notebooks/pipeline_demo.md
new file mode 100644
index 0000000000000000000000000000000000000000..1cea5b2dc261d0cd597cf6ff7dd8d1c6551aaf82
--- /dev/null
+++ b/notebooks/pipeline_demo.md
@@ -0,0 +1,42 @@
+# Regional Pipeline Demo
+
+Use this notebook to reproduce the CPU-only pipeline for either flagship region:
+
+- `hungary_transdanubia` (winter wheat rotation)
+- `jamaica_coffee` (Blue Mountain coffee belt)
+
+Each block mirrors the CLI steps described in the README. Run the notebook twice‚Äîonce for a baseline tier, once for an optimised tier‚Äîand record the CodeCarbon outputs for the hackathon submission.
+
+
+```python
+import subprocess
+from pathlib import Path
+
+REGION = 'hungary_transdanubia'  # or 'jamaica_coffee'
+DATA_DIR = Path('data') / REGION
+CONFIG_PATH = Path('config') / f'insight.{REGION}.yml'
+assert CONFIG_PATH.exists(), f'Missing config for {REGION}'
+DATA_DIR.mkdir(parents=True, exist_ok=True)
+CONFIG_PATH
+```
+
+
+```python
+def run(cmd):
+    if isinstance(cmd, (list, tuple)):
+        display_cmd = ' '.join(cmd)
+    else:
+        display_cmd = cmd
+    print('‚Ü™', display_cmd)
+    result = subprocess.run(cmd, check=True, text=True, capture_output=True)
+    print(result.stdout)
+    if result.stderr:
+        print(result.stderr)
+
+run(['python', 'scripts/build_region_cache.py', '--region', REGION])
+run(['python', 'scripts/build_region_insights.py', '--region', REGION])
+run(['python', 'scripts/train_region_model.py', '--region', REGION, '--tier', '2', '--freq', 'monthly'])
+run(['python', 'engine/evaluate_greenai.py', '--region', REGION, '--label', 'baseline', '--command', f'python scripts/train_region_model.py --region {REGION} --tier 1 --freq monthly'])
+run(['python', 'engine/evaluate_greenai.py', '--region', REGION, '--label', 'optimised', '--command', f'python scripts/train_region_model.py --region {REGION} --tier 3 --freq monthly'])
+run(['python', 'scripts/flag_anomalies.py', '--region', REGION, '--config', str(CONFIG_PATH)])
+```diff --git a/requirements.txt b/requirements.txt
index b8ca68e869dcc8ffd2ed0d96e68120ea787d660f..2197e7ee9e441afedb67322782524e431ee3e909 100644
diff --git a/run_pipeline.py b/run_pipeline.py
new file mode 100644
index 0000000000000000000000000000000000000000..ca2be45380c61520ba38d9a95d1197c61bbb22cc
--- /dev/null
+++ b/run_pipeline.py
@@ -0,0 +1,47 @@
+"""High-level CLI for the context-aware insight engine."""
+
+from __future__ import annotations
+
+import argparse
+from typing import Sequence
+
+from agent.insight_engine import build_insights
+from engine.distill_insights import distill_region
+
+
+def main(argv: Sequence[str] | None = None) -> int:
+    parser = argparse.ArgumentParser(description="Run the regional insight engine pipeline.")
+    parser.add_argument("--region", required=True, help="Region slug (e.g. jamaica_coffee)")
+    parser.add_argument("--distill", action="store_true", help="Run the distillation stage only.")
+    parser.add_argument(
+        "--insight",
+        action="store_true",
+        help="Produce insight feed and alerts (runs distillation implicitly).",
+    )
+    args = parser.parse_args(list(argv) if argv is not None else None)
+
+    region = args.region
+
+    distill_path: str | None = None
+    feed_path: str | None = None
+    alerts_path: str | None = None
+
+    if args.distill or args.insight:
+        distill_path = distill_region(region)
+        print(f"‚úÖ Distilled monthly summary ‚Üí {distill_path}")
+
+    if args.insight:
+        feed_path, alerts_path = build_insights(region)
+        print(f"‚úÖ Insight feed ready ‚Üí {feed_path}")
+        if alerts_path:
+            print(f"üì£ Alerts issued ‚Üí {alerts_path}")
+
+    if not any([args.distill, args.insight]):
+        parser.print_help()
+        return 1
+    return 0
+
+
+if __name__ == "__main__":  # pragma: no cover
+    raise SystemExit(main())
+diff --git a/scripts/prep_kaggle_export.py b/scripts/prep_kaggle_export.py
deleted file mode 100644
index 09f0eb7b825961e3d9e05b61af5c6bce522eaa5f..0000000000000000000000000000000000000000
--- a/scripts/prep_kaggle_export.py
+++ /dev/null
@@ -1,2 +0,0 @@
-# Bundle /data into a Kaggle-ready zip
-# TODOdiff --git a/scripts/run_pipeline.py b/scripts/run_pipeline.py
index e2e32da05647759166d75d0f7baabc8bed8d4ab6..320c12de817744452382f7e7b46e1c9484e686eb 100644
--- a/scripts/run_pipeline.py
+++ b/scripts/run_pipeline.py
@@ -554,52 +554,51 @@ from importlib import import_module
 from subprocess import CalledProcessError
 
 
 def _env_flag(name: str) -> bool:
     """Return True when an environment variable is truthy."""
 
     value = os.getenv(name)
     if value is None:
         return False
     return value.strip().lower() in {"1", "true", "yes", "on"}
 
 
 def _load_scripts():
     """Import pipeline modules lazily to avoid hard failures during ``--help``."""
 
     try:
         init_region = import_module("init_region").init_region
         fetch_all = import_module("fetch_all").main
         build_region_cache = import_module("build_region_cache").build_region_cache
         build_region_insights = import_module("build_region_insights").build_region_insights
         train_region_model = import_module("train_region_model").train_region_model
     except ModuleNotFoundError as exc:  # pragma: no cover - CLI path
         missing = exc.name or "a required module"
         raise SystemExit(
             f"Missing dependency '{missing}'. "
-            "Ensure `pip install -r requirements.txt` (or the Kaggle environment) has been run "
-            "before executing the pipeline."
+            "Ensure `pip install -r requirements.txt` has been run before executing the pipeline."
         ) from exc
 
     return (
         init_region,
         fetch_all,
         build_region_cache,
         build_region_insights,
         train_region_model,
     )
 
 
 def _step(
     label: str,
     func,
     *args,
     fail_fast: bool = True,
     strict_subprocess: bool = False,
     **kwargs,
 ) -> Dict[str, str]:
     """Run a pipeline step and capture status for later reporting."""
 
     start = datetime.utcnow()
     summary: Dict[str, str] = {
         "step": label,
         "started": start.isoformat() + "Z",diff --git a/scripts/utils_metadata.py b/scripts/utils_metadata.py
deleted file mode 100644
index 1ab1a6d154a3649a4c611b25d3406dd2dd7a4590..0000000000000000000000000000000000000000
--- a/scripts/utils_metadata.py
+++ /dev/null
@@ -1,20 +0,0 @@
-# scripts/utils_metadata.py
-import json
-from pathlib import Path
-
-def update_metadata(region_dir: Path, new_entries: dict):
-    """Append or create metadata.json with new variable entries."""
-    meta_file = region_dir / "metadata.json"
-
-    if meta_file.exists():
-        with open(meta_file) as f:
-            existing = json.load(f)
-    else:
-        existing = {}
-
-    existing.update(new_entries)
-
-    with open(meta_file, "w") as f:
-        json.dump(existing, f, indent=2)
-
-    print(f"üßæ Metadata updated ‚Üí {meta_file}")diff --git a/scripts/visualize_anomalies.py b/scripts/visualize_anomalies.py
deleted file mode 100644
index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0000000000000000000000000000000000000000
 
EOF
)
